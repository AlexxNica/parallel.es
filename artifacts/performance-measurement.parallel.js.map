{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///performance-measurement.parallel.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/module.js","webpack:///./example/performance-measurement.ts","webpack:///./example/knights-tour.ts","webpack:///./example/mandelbrot.ts","webpack:///./example/monte-carlo.ts","webpack:///./~/benchmark/benchmark.js","webpack:///./~/platform/platform.js"],"names":["root","factory","exports","module","define","amd","this","webpackJsonpparallel_es","174","g","Function","eval","e","window","175","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","configurable","get","l","i","178","__webpack_require__","addKnightBoardTests","suite","boardSizes","knightRunner6x6","checked","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","boardSize","value","add","__WEBPACK_IMPORTED_MODULE_6__knights_tour__","x","y","deferred","then","resolve","reject","defer","_iterator","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator___default","next","done","err","addMonteCarloTest","options","numberOfProjects","runOptions","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default","projects","createProjects","__WEBPACK_IMPORTED_MODULE_5__monte_carlo__","addMonteCarloTests","monteCarloOptions","investmentAmount","numRuns","numYears","performance","seed","volatility","_arr","_i","length","addMandelbrotTests","mandelbrotHeight","parseInt","document","querySelector","mandelbrotWidth","mandelbrotIterations","mandelbrotOptions","__WEBPACK_IMPORTED_MODULE_4__mandelbrot__","_arr2","_loop2","maxValuesPerTask","_i2","title","imageWidth","imageHeight","iterations","measure","__WEBPACK_IMPORTED_MODULE_3_benchmark__","on","event","appendTestResults","benchmarks","currentTarget","map","benchmark","info","toString","name","stats","times","jsonOutputField","textContent","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default","platform","runButton","disabled","initResultTable","run","async","clearOutputTable","outputTable","tBodies","removeChild","body","createTBody","forEach","row","insertRow","insertCell","columns","tHead","rows","cells","target","index","indexOf","deviation","toFixed","mean","moe","rme","sem","variance","sample","hz","count","push","startYear","Math","round","random","totalAmount","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__","n","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__","__WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator__","addEventListener","preventDefault","25","createEnvironment","board","Array","fill","knightTours","startPath","environment","moves","numberOfFields","results","stack","pos","coordinate","fieldIndex","_stack","_fieldIndex","move","successor","accessible","pop","syncKnightTours","start","parallelKnightTours","successors","result","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default","computeStartFields","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","directSuccessor","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","indirectSuccessor","total","startTime","now","__WEBPACK_IMPORTED_MODULE_1__src_api_browser__","from","inEnvironment","reduce","memo","subscribe","subResults","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","tours","console","log","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__","26","createMandelOptions","min","real","max","scalingFactor","computeMandelbrotLine","calculateZ","c","z","pow","zI","line","Uint8ClampedArray","cI","_calculateZ","base","parallelMandelbrot","__WEBPACK_IMPORTED_MODULE_0__src_api_browser__","range","syncMandelbrot","callback","27","initializeOptions","liquidity","createMonteCarloEnvironment","simulateOutcomes","cashFlows","toAbsoluteIndices","indices","currentPortfolioValue","previousYearIndex","relativeYear","currentYearIndex","cashFlowStartOfYear","year","randomPerformance","_year","projectsToCashFlows","projectsByThisYear","projectsByStartYear","cashFlow","project","calculateNoInterestReferenceLine","noInterestReferenceLine","investmentAmountLeft","projectsToSimulate","taskIndex","valuesPerWorker","slice","sort","a","b","arr","simulatedValues","calculateProject","groupForValue","groups","find","group","to","createGroups","requiredAmount","noInterestReference","description","percentage","separator","calculateRequiredAmount","amount","projectsSameYear","otherProject","median","values","half","floor","NUMBER_OF_BUCKETS","simulatedValuesThisYear","valuesByGroup","bucketSize","buckets","bucket","Number","MIN_VALUE","MAX_VALUE","subBuckets","j","subBucket","nonEmptyGroups","filter","oneSixth","twoThird","syncMonteCarlo","parallelMonteCarlo","userOptions","__WEBPACK_IMPORTED_MODULE_2__src_api_browser__","minValuesPerTask","90","runInContext","context","Benchmark","fn","bench","_","isPlainObject","isFunction","setOptions","id","counter","cloneDeep","Deferred","clone","clock","Event","type","assign","timeStamp","Suite","createFunction","args","anchor","freeDefine","prop","uid","runScript","support","browser","noop","apply","arguments","delay","_timerId","destroyElement","element","trash","appendChild","innerHTML","getFirstArgument","has","exec","getMean","sum","getSource","isStringable","String","decompilation","replace","test","isHostType","object","property","rePrimitive","isString","require","freeExports","freeRequire","code","script","doc","createElement","sibling","getElementsByTagName","parent","parentNode","prefix","createTextNode","cloneNode","text","insertBefore","constructor","forOwn","key","each","split","toLowerCase","_original","aborted","teardown","running","cycle","cycles","compiled","call","timer","stop","array","isFinite","error","compare","formatNumber","number","invoke","benches","execute","listeners","isAsync","getNext","events","complete","splice","cycleEvent","last","off","emit","eventProps","onCycle","raiseIndex","onComplete","queued","timeout","shift","onStart","toArray","isArray","join","separator1","separator2","arrayLike","abortSuite","resetting","calledBy","resetSuite","cancelled","reset","cloneSuite","filterSuite","aborting","abort","runSuite","listener","clearTimeout","other","getScore","xA","sampleB","xB","getU","sampleA","getZ","u","size1","size2","sqrt","critical","zStat","sample1","sample2","maxSize","minSize","u1","u2","abs","uTable","changes","queue","data","destination","source","prototype","changed","currValue","charAt","toStringBench","size","pm","isNaN","createCompiled","decompilable","fnArg","templateData","uidCounter","setup","interpolate","unit","begin","end","ns","getRes","measured","divisor","microseconds","getTime","Infinity","string","template","timers","res","stringable","minTime","funcBody","isEmpty","Error","elapsed","chrome","chromium","Interval","processObject","hrtime","microtimeObject","minBy","compute","enqueue","update","initCount","evaluate","df","sd","period","maxedOut","minSamples","maxTime","varOf","tTable","infinity","clocked","message","divisors","ceil","defaults","pick","contextProps","Date","RegExp","arrayRef","objectProto","setTimeout","unshift","req","process","partial","cloneDeepWith","isObject","onAbort","onError","onReset","navigator","userAgent","layout","product","manufacturer","os","prerelease","version","methodName","reverse","func","objectTypes","function","nodeType","freeModule","freeGlobal","global","self","moduleExports","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","28","29","30","91","__WEBPACK_AMD_DEFINE_RESULT__","capitalize","toUpperCase","cleanupOS","pattern","label","6.4","6.3","6.2","6.1","6.0","5.2","5.1","5.01","5.0","4.0","4.90","format","maxSafeInteger","trim","hasOwnProperty","getClassOf","qualify","accumulator","parse","ua","getLayout","guesses","guess","getManufacturer","getName","getOS","getProduct","getVersion","patterns","toStringPlatform","isCustomContext","nav","isSpecialCasedOS","isModuleScope","thisBinding","oldRoot","likeChrome","objectClass","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","alpha","beta","opera","operamini","operaClass","reOpera","arch","useFeatures","Apple","iPad","iPhone","iPod","Amazon","Kindle","Kindle Fire","Asus","Transformer","Barnes & Noble","Nook","BlackBerry","PlayBook","Google","Google TV","HP","TouchPad","HTC","LG","Microsoft","Xbox","Xbox One","Motorola","Xoom","Nintendo","Wii U","Wii","Nokia","Lumia","Samsung","Galaxy S","Galaxy S2","Galaxy S3","Galaxy S4","Sony","PlayStation 4","PlayStation 3","PlayStation Vita","parseFloat","lang","System","getProperty","system","runtime","flash","Capabilities","phantom","major","minor","patch","documentMode","appMinorVersion","external","architecture","family","cpuClass"],"mappings":"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","file":"performance-measurement.parallel.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parallel-es\"] = factory();\n\telse\n\t\troot[\"parallel-es\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parallel-es\"] = factory();\n\telse\n\t\troot[\"parallel-es\"] = factory();\n})(this, function() {\nreturn webpackJsonpparallel_es([0],{\n\n/***/ 174:\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n\n/***/ 175:\n/***/ function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n/***/ },\n\n/***/ 178:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_benchmark__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_benchmark___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_benchmark__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mandelbrot__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__monte_carlo__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__knights_tour__ = __webpack_require__(25);\n\n\n\n\n/* tslint:disable:no-var-requires */\nvar platform = __webpack_require__(91);\n\n\n\nvar runButton = document.querySelector(\"#run\");\nvar outputTable = document.querySelector(\"#output-table\");\nvar jsonOutputField = document.querySelector(\"#json-output\");\nvar knightRunner6x6 = document.querySelector(\"#knight-runner-6-6\");\nfunction addKnightBoardTests(suite) {\n    var boardSizes = knightRunner6x6.checked ? [5, 6] : [5];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        var _loop = function _loop() {\n            var boardSize = _step.value;\n\n            suite.add(\"Knights Tour (\" + boardSize + \"x\" + boardSize + \") sync\", function () {\n                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__knights_tour__[\"a\" /* syncKnightTours */])({ x: 0, y: 0 }, boardSize);\n            });\n            suite.add(\"Knights Tour (\" + boardSize + \"x\" + boardSize + \") parallel\", function (deferred) {\n                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_6__knights_tour__[\"b\" /* parallelKnightTours */])({ x: 0, y: 0 }, boardSize).then(function () {\n                    return deferred.resolve();\n                }, function () {\n                    return deferred.reject();\n                });\n            }, { defer: true });\n        };\n\n        for (var _iterator = __WEBPACK_IMPORTED_MODULE_2_babel_runtime_core_js_get_iterator___default()(boardSizes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction addMonteCarloTest(suite, options, numberOfProjects) {\n    var runOptions = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()(options, {\n        projects: createProjects(numberOfProjects)\n    });\n    suite.add(\"Montecarlo \" + numberOfProjects + \" sync\", function () {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__monte_carlo__[\"a\" /* syncMonteCarlo */])(options);\n    });\n    suite.add(\"Monte carlo \" + numberOfProjects + \" parallel\", function (deferred) {\n        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__monte_carlo__[\"b\" /* parallelMonteCarlo */])(runOptions).then(function () {\n            return deferred.resolve();\n        }, function () {\n            return deferred.reject();\n        });\n    }, { defer: true });\n}\nfunction addMonteCarloTests(suite) {\n    var monteCarloOptions = {\n        investmentAmount: 620000,\n        numRuns: 10000,\n        numYears: 15,\n        performance: 0.0340000,\n        seed: 10,\n        volatility: 0.0896000\n    };\n    var _arr = [1, 2, 4, 6, 8, 10, 15];\n    for (var _i = 0; _i < _arr.length; _i++) {\n        var numberOfProjects = _arr[_i];\n        addMonteCarloTest(suite, monteCarloOptions, numberOfProjects);\n    }\n}\nfunction addMandelbrotTests(suite) {\n    var mandelbrotHeight = parseInt(document.querySelector(\"#mandelbrot-height\").value, 10);\n    var mandelbrotWidth = parseInt(document.querySelector(\"#mandelbrot-width\").value, 10);\n    var mandelbrotIterations = parseInt(document.querySelector(\"#mandelbrot-iterations\").value, 10);\n    var mandelbrotOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__mandelbrot__[\"a\" /* createMandelOptions */])(mandelbrotWidth, mandelbrotHeight, mandelbrotIterations);\n    suite.add(\"Mandelbrot \" + mandelbrotWidth + \"x\" + mandelbrotHeight + \", \" + mandelbrotIterations + \" sync\", function () {\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__mandelbrot__[\"c\" /* syncMandelbrot */])(mandelbrotOptions, function () {\n            return undefined;\n        });\n    });\n    var _arr2 = [undefined, 1, 75, 150, 300, 600, 1200];\n\n    var _loop2 = function _loop2() {\n        var maxValuesPerTask = _arr2[_i2];\n        var title = \"Mandelbrot \" + mandelbrotOptions.imageWidth + \"x\" + mandelbrotOptions.imageHeight + \", \" + mandelbrotOptions.iterations + \" parallel (\" + maxValuesPerTask + \")\";\n        suite.add(title, function (deferred) {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__mandelbrot__[\"b\" /* parallelMandelbrot */])(mandelbrotOptions, { maxValuesPerTask: maxValuesPerTask }).then(function () {\n                return deferred.resolve();\n            }, function () {\n                return deferred.reject();\n            });\n        }, { defer: true });\n    };\n\n    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n        _loop2();\n    }\n}\nfunction measure() {\n    var suite = new __WEBPACK_IMPORTED_MODULE_3_benchmark__[\"Suite\"]();\n    addMonteCarloTests(suite);\n    addMandelbrotTests(suite);\n    addKnightBoardTests(suite);\n    suite.on(\"cycle\", function (event) {\n        appendTestResults(event);\n    });\n    suite.on(\"complete\", function (event) {\n        var benchmarks = event.currentTarget.map(function (benchmark) {\n            return {\n                info: benchmark.toString,\n                name: benchmark.name,\n                stats: benchmark.stats,\n                times: benchmark.times\n            };\n        });\n        jsonOutputField.textContent = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()({ benchmarks: benchmarks, platform: platform }, undefined, \"    \");\n        runButton.disabled = false;\n    });\n    suite.on(\"start\", initResultTable);\n    suite.run({ async: true });\n}\nrunButton.addEventListener(\"click\", function (event) {\n    event.preventDefault();\n    runButton.disabled = true;\n    measure();\n});\nfunction initResultTable(event) {\n    clearOutputTable();\n    function clearOutputTable() {\n        while (outputTable.tBodies.length > 0) {\n            outputTable.removeChild(outputTable.tBodies[0]);\n        }\n    }\n    var body = outputTable.createTBody();\n    event.currentTarget.forEach(function (suite) {\n        var row = body.insertRow();\n        row.insertCell().textContent = suite.name;\n        var columns = outputTable.tHead.rows[0].cells.length;\n        for (var i = 0; i < columns; ++i) {\n            row.insertCell();\n        }\n    });\n}\nfunction appendTestResults(event) {\n    var body = outputTable.tBodies[0];\n    var benchmark = event.target;\n    var index = event.currentTarget.indexOf(benchmark);\n    var row = body.rows[index];\n    row.cells[1].textContent = benchmark.stats.deviation.toFixed(4);\n    row.cells[2].textContent = benchmark.stats.mean.toFixed(4);\n    row.cells[3].textContent = benchmark.stats.moe.toFixed(4);\n    row.cells[4].textContent = benchmark.stats.rme.toFixed(4);\n    row.cells[5].textContent = benchmark.stats.sem.toFixed(4);\n    row.cells[6].textContent = benchmark.stats.variance.toFixed(4);\n    row.cells[7].textContent = benchmark.stats.sample.length.toFixed(0);\n    row.cells[8].textContent = benchmark.hz.toFixed(4);\n}\nfunction createProjects(count) {\n    var projects = [];\n    for (var i = 0; i < count; ++i) {\n        projects.push({\n            startYear: Math.round(Math.random() * 15),\n            totalAmount: Math.round(Math.random() * 100000)\n        });\n    }\n    return projects;\n}\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_api_browser__ = __webpack_require__(6);\n/* unused harmony export knightTours */\n/* harmony export (immutable) */ exports[\"a\"] = syncKnightTours;\n/* harmony export (immutable) */ exports[\"b\"] = parallelKnightTours;\n\n\nfunction createEnvironment(boardSize) {\n    var board = new Array(boardSize * boardSize);\n    board.fill(0);\n    return {\n        board: board,\n        boardSize: boardSize\n    };\n}\nfunction knightTours(startPath, environment) {\n    var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n    var boardSize = environment.boardSize;\n    var board = environment.board;\n    var numberOfFields = boardSize * boardSize;\n    var results = 0;\n    var stack = startPath.map(function (pos, index) {\n        return { coordinate: pos, n: index + 1 };\n    });\n    for (var index = 0; index < startPath.length - 1; ++index) {\n        var fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n    while (stack.length > 0) {\n        var _stack = stack[stack.length - 1];\n        var coordinate = _stack.coordinate;\n        var n = _stack.n;\n\n        var _fieldIndex = coordinate.x * boardSize + coordinate.y;\n        if (board[_fieldIndex] !== 0) {\n            // back tracking\n            board[_fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n        board[_fieldIndex] = n;\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n    return results;\n}\nfunction syncKnightTours(start, boardSize) {\n    var environment = createEnvironment(boardSize);\n    return knightTours([start], environment);\n}\nfunction parallelKnightTours(start, boardSize, options) {\n    function successors(coordinate) {\n        var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(moves), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var move = _step.value;\n\n                var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n                var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && (successor.x !== start.x || successor.y !== start.y) && successor.x !== coordinate.x && successor.y !== coordinate.y;\n                if (accessible) {\n                    result.push(successor);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return result;\n    }\n    function computeStartFields() {\n        var result = [];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(successors(start)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var directSuccessor = _step2.value;\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(successors(directSuccessor)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var indirectSuccessor = _step3.value;\n\n                        result.push([start, directSuccessor, indirectSuccessor]);\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        return result;\n    }\n    var total = 0;\n    var startTime = performance.now();\n    return __WEBPACK_IMPORTED_MODULE_1__src_api_browser__[\"default\"].from(computeStartFields(), options).inEnvironment(createEnvironment, boardSize).map(knightTours).reduce(0, function (memo, count) {\n        return memo + count;\n    }).subscribe(function (subResults) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n            for (var _iterator4 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(subResults), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var tours = _step4.value;\n\n                total += tours;\n            }\n            /* tslint:disable:no-console */\n        } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                }\n            } finally {\n                if (_didIteratorError4) {\n                    throw _iteratorError4;\n                }\n            }\n        }\n\n        console.log(total / (performance.now() - startTime) * 1000 + \" results per second\");\n    });\n}\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_api_browser__ = __webpack_require__(6);\n/* harmony export (immutable) */ exports[\"a\"] = createMandelOptions;\n/* unused harmony export computeMandelbrotLine */\n/* harmony export (immutable) */ exports[\"b\"] = parallelMandelbrot;\n/* harmony export (immutable) */ exports[\"c\"] = syncMandelbrot;\n\nfunction createMandelOptions(imageWidth, imageHeight, iterations) {\n    // X axis shows real numbers, y axis imaginary\n    var min = { i: -1.2, real: -2.0 };\n    var max = { i: 0, real: 1.0 };\n    max.i = min.i + (max.real - min.real) * imageHeight / imageWidth;\n    var scalingFactor = {\n        i: (max.i - min.i) / (imageHeight - 1),\n        real: (max.real - min.real) / (imageWidth - 1)\n    };\n    return {\n        imageHeight: imageHeight,\n        imageWidth: imageWidth,\n        iterations: iterations,\n        max: max,\n        min: min,\n        scalingFactor: scalingFactor\n    };\n}\nfunction computeMandelbrotLine(y, options) {\n    function calculateZ(c) {\n        var z = { i: c.i, real: c.real };\n        var n = 0;\n        for (; n < options.iterations; ++n) {\n            if (Math.pow(z.real, 2) + Math.pow(z.i, 2) > 4) {\n                break;\n            }\n            // z ** 2 + c\n            var zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = Math.pow(z.real, 2) - Math.pow(zI, 2) + c.real;\n        }\n        return { z: z, n: n };\n    }\n    var line = new Uint8ClampedArray(options.imageWidth * 4);\n    var cI = options.max.i - y * options.scalingFactor.i;\n    for (var x = 0; x < options.imageWidth; ++x) {\n        var c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        var _calculateZ = calculateZ(c);\n\n        var n = _calculateZ.n;\n\n        var base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\nfunction parallelMandelbrot(mandelbrotOptions, options) {\n    return __WEBPACK_IMPORTED_MODULE_0__src_api_browser__[\"default\"].range(0, mandelbrotOptions.imageHeight, 1, options).inEnvironment(mandelbrotOptions).map(computeMandelbrotLine);\n}\nfunction syncMandelbrot(mandelbrotOptions, callback) {\n    for (var y = 0; y < mandelbrotOptions.imageHeight; ++y) {\n        var line = computeMandelbrotLine(y, mandelbrotOptions);\n        callback(line, y);\n    }\n}\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_api_browser__ = __webpack_require__(6);\n/* harmony export (immutable) */ exports[\"a\"] = syncMonteCarlo;\n/* harmony export (immutable) */ exports[\"b\"] = parallelMonteCarlo;\n\n\n\nfunction initializeOptions(options) {\n    return __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\nfunction createMonteCarloEnvironment(options) {\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows, numYears) {\n        function toAbsoluteIndices(indices) {\n            var currentPortfolioValue = options.investmentAmount;\n            var previousYearIndex = 100;\n            for (var relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                var currentYearIndex = indices[relativeYear];\n                var cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n                // scale current value with performance gain according to index\n                var performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n                indices[relativeYear] = Math.round(currentPortfolioValue);\n                previousYearIndex = currentYearIndex;\n            }\n            return indices;\n        }\n        var result = new Array(options.numYears);\n        for (var year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n        for (var run = 0; run < options.numRuns; run++) {\n            var indices = [100];\n            for (var i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                var randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n            for (var _year = 0; _year < indices.length; ++_year) {\n                result[_year][run] = indices[_year];\n            }\n        }\n        return result;\n    }\n    function projectsToCashFlows() {\n        var cashFlows = [];\n        for (var year = 0; year < options.numYears; ++year) {\n            var projectsByThisYear = projectsByStartYear[year] || [];\n            var cashFlow = -projectsByThisYear.reduce(function (memo, project) {\n                return memo + project.totalAmount;\n            }, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n    function calculateNoInterestReferenceLine(cashFlows) {\n        var noInterestReferenceLine = [];\n        var investmentAmountLeft = options.investmentAmount;\n        for (var year = 0; year < options.numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n    var projectsToSimulate = options.projects;\n    if (options.taskIndex && options.valuesPerWorker) {\n        projectsToSimulate = options.projects.slice(options.taskIndex * options.valuesPerWorker, (options.taskIndex + 1) * options.valuesPerWorker);\n    }\n    var projects = options.projects.sort(function (a, b) {\n        return a.startYear - b.startYear;\n    });\n    // Group projects by startYear, use lodash groupBy instead\n    var projectsByStartYear = {};\n    for (var i = 0; i < projects.length; ++i) {\n        var project = projects[i];\n        var arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n    var cashFlows = projectsToCashFlows();\n    var noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows);\n    var numYears = projectsToSimulate.reduce(function (memo, project) {\n        return Math.max(memo, project.startYear);\n    }, 0);\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine: noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears: numYears,\n        projectsByStartYear: projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\nfunction calculateProject(project, environment) {\n    var NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value, groups) {\n        return groups.find(function (group) {\n            return (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value);\n        });\n    }\n    function createGroups(requiredAmount, noInterestReference) {\n        return [{ description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true }, { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount }, { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity }, { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }];\n    }\n    function calculateRequiredAmount() {\n        var amount = project.totalAmount;\n        var projectsSameYear = environment.projectsByStartYear[project.startYear];\n        for (var i = 0; i < projectsSameYear.length; ++i) {\n            var otherProject = projectsSameYear[i];\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n    function median(values) {\n        var half = Math.floor(values.length / 2);\n        if (values.length % 2) {\n            return values[half];\n        }\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n    var requiredAmount = calculateRequiredAmount();\n    var simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort(function (a, b) {\n        return a - b;\n    });\n    var groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    var valuesByGroup = {};\n    var bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    var buckets = [];\n    for (var i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        var bucket = {\n            max: Number.MIN_VALUE,\n            min: Number.MAX_VALUE,\n            subBuckets: {}\n        };\n        for (var j = i; j < i + bucketSize; ++j) {\n            var value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n            var group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            var subBucket = bucket.subBuckets[group.name] = bucket.subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n        buckets.push(bucket);\n    }\n    var nonEmptyGroups = groups.filter(function (group) {\n        return !!valuesByGroup[group.name];\n    });\n    nonEmptyGroups.forEach(function (group) {\n        return group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length;\n    });\n    var oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets: buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project: project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\nfunction syncMonteCarlo(options) {\n    var environment = createMonteCarloEnvironment(initializeOptions(options));\n    var projects = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(options.projects), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var project = _step.value;\n\n            projects.push(calculateProject(project, environment));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return projects;\n}\nfunction parallelMonteCarlo(userOptions) {\n    var options = initializeOptions(userOptions);\n    return __WEBPACK_IMPORTED_MODULE_2__src_api_browser__[\"default\"].from(options.projects, { minValuesPerTask: 2 }).inEnvironment(createMonteCarloEnvironment, options).map(calculateProject);\n}\n\n/***/ },\n\n/***/ 90:\n/***/ function(module, exports) {\n\n/*!\n * Benchmark.js <https://benchmarkjs.com/>\n * Copyright 2010-2016 Mathias Bynens <https://mths.be/>\n * Based on JSLitmus.js, copyright Robert Kieffer <http://broofa.com/>\n * Modified by John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments. */\n  var undefined;\n\n  /** Used to determine if values are of the language type Object. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `define`. */\n  var freeDefine = typeof define == 'function' && typeof define.amd == 'object' && define.amd && define;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /** Detect free variable `require`. */\n  var freeRequire = typeof require == 'function' && require;\n\n  /** Used to assign each benchmark an incremented id. */\n  var counter = 0;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Used to detect primitive types. */\n  var rePrimitive = /^(?:boolean|number|string|undefined)$/;\n\n  /** Used to make every compiled test unique. */\n  var uidCounter = 0;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Date', 'Function', 'Math', 'Object', 'RegExp', 'String', '_',\n    'clearTimeout', 'chrome', 'chromium', 'document', 'navigator', 'phantom',\n    'platform', 'process', 'runtime', 'setTimeout'\n  ];\n\n  /** Used to avoid hz of Infinity. */\n  var divisors = {\n    '1': 4096,\n    '2': 512,\n    '3': 64,\n    '4': 8,\n    '5': 0\n  };\n\n  /**\n   * T-Distribution two-tailed critical values for 95% confidence.\n   * For more info see http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm.\n   */\n  var tTable = {\n    '1':  12.706, '2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n    '7':  2.365,  '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n    '13': 2.16,   '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n    '19': 2.093,  '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n    '25': 2.06,   '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n    'infinity': 1.96\n  };\n\n  /**\n   * Critical Mann-Whitney U-values for 95% confidence.\n   * For more info see http://www.saburchill.com/IBbiology/stats/003.html.\n   */\n  var uTable = {\n    '5':  [0, 1, 2],\n    '6':  [1, 2, 3, 5],\n    '7':  [1, 3, 5, 6, 8],\n    '8':  [2, 4, 6, 8, 10, 13],\n    '9':  [2, 4, 7, 10, 12, 15, 17],\n    '10': [3, 5, 8, 11, 14, 17, 20, 23],\n    '11': [3, 6, 9, 13, 16, 19, 23, 26, 30],\n    '12': [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],\n    '13': [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],\n    '14': [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],\n    '15': [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],\n    '16': [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],\n    '17': [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],\n    '18': [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],\n    '19': [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],\n    '20': [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],\n    '21': [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],\n    '22': [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],\n    '23': [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],\n    '24': [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],\n    '25': [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],\n    '26': [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],\n    '27': [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],\n    '28': [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],\n    '29': [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],\n    '30': [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `Benchmark` function using the given `context` object.\n   *\n   * @static\n   * @memberOf Benchmark\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `Benchmark` function.\n   */\n  function runInContext(context) {\n    // Exit early if unable to acquire lodash.\n    var _ = context && context._ || require('lodash') || root._;\n    if (!_) {\n      Benchmark.runInContext = runInContext;\n      return Benchmark;\n    }\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String;\n\n    /** Used for `Array` and `Object` method references. */\n    var arrayRef = [],\n        objectProto = Object.prototype;\n\n    /** Native method shortcuts. */\n    var abs = Math.abs,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        log = Math.log,\n        max = Math.max,\n        min = Math.min,\n        pow = Math.pow,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        shift = arrayRef.shift,\n        slice = arrayRef.slice,\n        sqrt = Math.sqrt,\n        toString = objectProto.toString,\n        unshift = arrayRef.unshift;\n\n    /** Used to avoid inclusion in Browserified bundles. */\n    var req = require;\n\n    /** Detect DOM document object. */\n    var doc = isHostType(context, 'document') && context.document;\n\n    /** Used to access Wade Simmons' Node.js `microtime` module. */\n    var microtimeObject = req('microtime');\n\n    /** Used to access Node.js's high resolution timer. */\n    var processObject = isHostType(context, 'process') && context.process;\n\n    /** Used to prevent a `removeChild` memory leak in IE < 9. */\n    var trash = doc && doc.createElement('div');\n\n    /** Used to integrity check compiled tests. */\n    var uid = 'uid' + _.now();\n\n    /** Used to avoid infinite recursion when methods call each other. */\n    var calledBy = {};\n\n    /**\n     * An object used to flag environments/features.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @type Object\n     */\n    var support = {};\n\n    (function() {\n\n      /**\n       * Detect if running in a browser environment.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.browser = doc && isHostType(context, 'navigator') && !isHostType(context, 'phantom');\n\n      /**\n       * Detect if the Timers API exists.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.timeout = isHostType(context, 'setTimeout') && isHostType(context, 'clearTimeout');\n\n      /**\n       * Detect if function decompilation is support.\n       *\n       * @name decompilation\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      try {\n        // Safari 2.x removes commas in object literals from `Function#toString` results.\n        // See http://webk.it/11609 for more details.\n        // Firefox 3.6 and Opera 9.25 strip grouping parentheses from `Function#toString` results.\n        // See http://bugzil.la/559438 for more details.\n        support.decompilation = Function(\n          ('return (' + (function(x) { return { 'x': '' + (1 + x) + '', 'y': 0 }; }) + ')')\n          // Avoid issues with code added by Istanbul.\n          .replace(/__cov__[^;]+;/g, '')\n        )()(0).x === '1';\n      } catch(e) {\n        support.decompilation = false;\n      }\n    }());\n\n    /**\n     * Timer object used by `clock()` and `Deferred#resolve`.\n     *\n     * @private\n     * @type Object\n     */\n    var timer = {\n\n      /**\n       * The timer namespace object or constructor.\n       *\n       * @private\n       * @memberOf timer\n       * @type {Function|Object}\n       */\n      'ns': Date,\n\n      /**\n       * Starts the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'start': null, // Lazy defined in `clock()`.\n\n      /**\n       * Stops the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'stop': null // Lazy defined in `clock()`.\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The Benchmark constructor.\n     *\n     * Note: The Benchmark constructor exposes a handful of lodash methods to\n     * make working with arrays, collections, and objects easier. The lodash\n     * methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`forOwn`](https://lodash.com/docs#forOwn),\n     * [`has`](https://lodash.com/docs#has), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var bench = new Benchmark(fn);\n     *\n     * // or using a name first\n     * var bench = new Benchmark('foo', fn);\n     *\n     * // or with options\n     * var bench = new Benchmark('foo', fn, {\n     *\n     *   // displayed by `Benchmark#toString` if `name` is not available\n     *   'id': 'xyz',\n     *\n     *   // called when the benchmark starts running\n     *   'onStart': onStart,\n     *\n     *   // called after each run cycle\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the benchmark completes running\n     *   'onComplete': onComplete,\n     *\n     *   // compiled/called before the test loop\n     *   'setup': setup,\n     *\n     *   // compiled/called after the test loop\n     *   'teardown': teardown\n     * });\n     *\n     * // or name and options\n     * var bench = new Benchmark('foo', {\n     *\n     *   // a flag to indicate the benchmark is deferred\n     *   'defer': true,\n     *\n     *   // benchmark test function\n     *   'fn': function(deferred) {\n     *     // call `Deferred#resolve` when the deferred test is finished\n     *     deferred.resolve();\n     *   }\n     * });\n     *\n     * // or options only\n     * var bench = new Benchmark({\n     *\n     *   // benchmark name\n     *   'name': 'foo',\n     *\n     *   // benchmark test as a string\n     *   'fn': '[1,2,3,4].sort()'\n     * });\n     *\n     * // a test's `this` binding is set to the benchmark instance\n     * var bench = new Benchmark('foo', function() {\n     *   'My name is '.concat(this.name); // \"My name is foo\"\n     * });\n     */\n    function Benchmark(name, fn, options) {\n      var bench = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(bench instanceof Benchmark)) {\n        return new Benchmark(name, fn, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      }\n      else if (_.isFunction(name)) {\n        // 2 arguments (fn, options).\n        options = fn;\n        fn = name;\n      }\n      else if (_.isPlainObject(fn)) {\n        // 2 arguments (name, options).\n        options = fn;\n        fn = null;\n        bench.name = name;\n      }\n      else {\n        // 3 arguments (name, fn [, options]).\n        bench.name = name;\n      }\n      setOptions(bench, options);\n\n      bench.id || (bench.id = ++counter);\n      bench.fn == null && (bench.fn = fn);\n\n      bench.stats = cloneDeep(bench.stats);\n      bench.times = cloneDeep(bench.times);\n    }\n\n    /**\n     * The Deferred constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object} clone The cloned benchmark instance.\n     */\n    function Deferred(clone) {\n      var deferred = this;\n      if (!(deferred instanceof Deferred)) {\n        return new Deferred(clone);\n      }\n      deferred.benchmark = clone;\n      clock(deferred);\n    }\n\n    /**\n     * The Event constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object|string} type The event type.\n     */\n    function Event(type) {\n      var event = this;\n      if (type instanceof Event) {\n        return type;\n      }\n      return (event instanceof Event)\n        ? _.assign(event, { 'timeStamp': _.now() }, typeof type == 'string' ? { 'type': type } : type)\n        : new Event(type);\n    }\n\n    /**\n     * The Suite constructor.\n     *\n     * Note: Each Suite instance has a handful of wrapped lodash methods to\n     * make working with Suites easier. The wrapped lodash methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {string} name A name to identify the suite.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var suite = new Benchmark.Suite;\n     *\n     * // or using a name first\n     * var suite = new Benchmark.Suite('foo');\n     *\n     * // or with options\n     * var suite = new Benchmark.Suite('foo', {\n     *\n     *   // called when the suite starts running\n     *   'onStart': onStart,\n     *\n     *   // called between running benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the suite completes running\n     *   'onComplete': onComplete\n     * });\n     */\n    function Suite(name, options) {\n      var suite = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(suite instanceof Suite)) {\n        return new Suite(name, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      } else {\n        // 2 arguments (name [, options]).\n        suite.name = name;\n      }\n      setOptions(suite, options);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A specialized version of `_.cloneDeep` which only clones arrays and plain\n     * objects assigning all other values by reference.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @returns {*} The cloned value.\n     */\n    var cloneDeep = _.partial(_.cloneDeepWith, _, function(value) {\n      // Only clone primitives, arrays, and plain objects.\n      return (_.isObject(value) && !_.isArray(value) && !_.isPlainObject(value))\n        ? value\n        : undefined;\n    });\n\n    /**\n     * Creates a function from the given arguments string and body.\n     *\n     * @private\n     * @param {string} args The comma separated function arguments.\n     * @param {string} body The function body.\n     * @returns {Function} The new function.\n     */\n    function createFunction() {\n      // Lazy define.\n      createFunction = function(args, body) {\n        var result,\n            anchor = freeDefine ? freeDefine.amd : Benchmark,\n            prop = uid + 'createFunction';\n\n        runScript((freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '=function(' + args + '){' + body + '}');\n        result = anchor[prop];\n        delete anchor[prop];\n        return result;\n      };\n      // Fix JaegerMonkey bug.\n      // For more information see http://bugzil.la/639720.\n      createFunction = support.browser && (createFunction('', 'return\"' + uid + '\"') || _.noop)() == uid ? createFunction : Function;\n      return createFunction.apply(null, arguments);\n    }\n\n    /**\n     * Delay the execution of a function based on the benchmark's `delay` property.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} fn The function to execute.\n     */\n    function delay(bench, fn) {\n      bench._timerId = _.delay(fn, bench.delay * 1e3);\n    }\n\n    /**\n     * Destroys the given element.\n     *\n     * @private\n     * @param {Element} element The element to destroy.\n     */\n    function destroyElement(element) {\n      trash.appendChild(element);\n      trash.innerHTML = '';\n    }\n\n    /**\n     * Gets the name of the first argument from a function's source.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The argument name.\n     */\n    function getFirstArgument(fn) {\n      return (!_.has(fn, 'toString') &&\n        (/^[\\s(]*function[^(]*\\(([^\\s,)]+)/.exec(fn) || 0)[1]) || '';\n    }\n\n    /**\n     * Computes the arithmetic mean of a sample.\n     *\n     * @private\n     * @param {Array} sample The sample.\n     * @returns {number} The mean.\n     */\n    function getMean(sample) {\n      return (_.reduce(sample, function(sum, x) {\n        return sum + x;\n      }) / sample.length) || 0;\n    }\n\n    /**\n     * Gets the source code of a function.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The function's source code.\n     */\n    function getSource(fn) {\n      var result = '';\n      if (isStringable(fn)) {\n        result = String(fn);\n      } else if (support.decompilation) {\n        // Escape the `{` for Firefox 1.\n        result = _.result(/^[^{]+\\{([\\s\\S]*)\\}\\s*$/.exec(fn), 1);\n      }\n      // Trim string.\n      result = (result || '').replace(/^\\s+|\\s+$/g, '');\n\n      // Detect strings containing only the \"use strict\" directive.\n      return /^(?:\\/\\*+[\\w\\W]*?\\*\\/|\\/\\/.*?[\\n\\r\\u2028\\u2029]|\\s)*([\"'])use strict\\1;?$/.test(result)\n        ? ''\n        : result;\n    }\n\n    /**\n     * Checks if an object is of the specified class.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {string} name The name of the class.\n     * @returns {boolean} Returns `true` if the value is of the specified class, else `false`.\n     */\n    function isClassOf(value, name) {\n      return value != null && toString.call(value) == '[object ' + name + ']';\n    }\n\n    /**\n     * Host objects can return type values that are different from their actual\n     * data type. The objects we are concerned with usually return non-primitive\n     * types of \"object\", \"function\", or \"unknown\".\n     *\n     * @private\n     * @param {*} object The owner of the property.\n     * @param {string} property The property to check.\n     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n     */\n    function isHostType(object, property) {\n      if (object == null) {\n        return false;\n      }\n      var type = typeof object[property];\n      return !rePrimitive.test(type) && (type != 'object' || !!object[property]);\n    }\n\n    /**\n     * Checks if a value can be safely coerced to a string.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the value can be coerced, else `false`.\n     */\n    function isStringable(value) {\n      return _.isString(value) || (_.has(value, 'toString') && _.isFunction(value.toString));\n    }\n\n    /**\n     * A wrapper around `require` to suppress `module missing` errors.\n     *\n     * @private\n     * @param {string} id The module id.\n     * @returns {*} The exported module or `null`.\n     */\n    function require(id) {\n      try {\n        var result = freeExports && freeRequire(id);\n      } catch(e) {}\n      return result || null;\n    }\n\n    /**\n     * Runs a snippet of JavaScript via script injection.\n     *\n     * @private\n     * @param {string} code The code to run.\n     */\n    function runScript(code) {\n      var anchor = freeDefine ? define.amd : Benchmark,\n          script = doc.createElement('script'),\n          sibling = doc.getElementsByTagName('script')[0],\n          parent = sibling.parentNode,\n          prop = uid + 'runScript',\n          prefix = '(' + (freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '||function(){})();';\n\n      // Firefox 2.0.0.2 cannot use script injection as intended because it executes\n      // asynchronously, but that's OK because script injection is only used to avoid\n      // the previously commented JaegerMonkey bug.\n      try {\n        // Remove the inserted script *before* running the code to avoid differences\n        // in the expected script element count/order of the document.\n        script.appendChild(doc.createTextNode(prefix + code));\n        anchor[prop] = function() { destroyElement(script); };\n      } catch(e) {\n        parent = parent.cloneNode(false);\n        sibling = null;\n        script.text = code;\n      }\n      parent.insertBefore(script, sibling);\n      delete anchor[prop];\n    }\n\n    /**\n     * A helper function for setting options/event handlers.\n     *\n     * @private\n     * @param {Object} object The benchmark or suite instance.\n     * @param {Object} [options={}] Options object.\n     */\n    function setOptions(object, options) {\n      options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));\n\n      _.forOwn(options, function(value, key) {\n        if (value != null) {\n          // Add event listeners.\n          if (/^on[A-Z]/.test(key)) {\n            _.each(key.split(' '), function(key) {\n              object.on(key.slice(2).toLowerCase(), value);\n            });\n          } else if (!_.has(object, key)) {\n            object[key] = cloneDeep(value);\n          }\n        }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Handles cycling/completing the deferred benchmark.\n     *\n     * @memberOf Benchmark.Deferred\n     */\n    function resolve() {\n      var deferred = this,\n          clone = deferred.benchmark,\n          bench = clone._original;\n\n      if (bench.aborted) {\n        // cycle() -> clone cycle/complete event -> compute()'s invoked bench.run() cycle/complete.\n        deferred.teardown();\n        clone.running = false;\n        cycle(deferred);\n      }\n      else if (++deferred.cycles < clone.count) {\n        clone.compiled.call(deferred, context, timer);\n      }\n      else {\n        timer.stop(deferred);\n        deferred.teardown();\n        delay(clone, function() { cycle(deferred); });\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A generic `Array#filter` like method.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} array The array to iterate over.\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Array} A new array of values that passed callback filter.\n     * @example\n     *\n     * // get odd numbers\n     * Benchmark.filter([1, 2, 3, 4, 5], function(n) {\n     *   return n % 2;\n     * }); // -> [1, 3, 5];\n     *\n     * // get fastest benchmarks\n     * Benchmark.filter(benches, 'fastest');\n     *\n     * // get slowest benchmarks\n     * Benchmark.filter(benches, 'slowest');\n     *\n     * // get benchmarks that completed without erroring\n     * Benchmark.filter(benches, 'successful');\n     */\n    function filter(array, callback) {\n      if (callback === 'successful') {\n        // Callback to exclude those that are errored, unrun, or have hz of Infinity.\n        callback = function(bench) {\n          return bench.cycles && _.isFinite(bench.hz) && !bench.error;\n        };\n      }\n      else if (callback === 'fastest' || callback === 'slowest') {\n        // Get successful, sort by period + margin of error, and filter fastest/slowest.\n        var result = filter(array, 'successful').sort(function(a, b) {\n          a = a.stats; b = b.stats;\n          return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === 'fastest' ? 1 : -1);\n        });\n\n        return _.filter(result, function(bench) {\n          return result[0].compare(bench) == 0;\n        });\n      }\n      return _.filter(array, callback);\n    }\n\n    /**\n     * Converts a number to a more readable comma-separated string representation.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {number} number The number to convert.\n     * @returns {string} The more readable string representation.\n     */\n    function formatNumber(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') +\n        (number[1] ? '.' + number[1] : '');\n    }\n\n    /**\n     * Invokes a method on all items in an array.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} benches Array of benchmarks to iterate over.\n     * @param {Object|string} name The name of the method to invoke OR options object.\n     * @param {...*} [args] Arguments to invoke the method with.\n     * @returns {Array} A new array of values returned from each method invoked.\n     * @example\n     *\n     * // invoke `reset` on all benchmarks\n     * Benchmark.invoke(benches, 'reset');\n     *\n     * // invoke `emit` with arguments\n     * Benchmark.invoke(benches, 'emit', 'complete', listener);\n     *\n     * // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks\n     * Benchmark.invoke(benches, {\n     *\n     *   // invoke the `run` method\n     *   'name': 'run',\n     *\n     *   // pass a single argument\n     *   'args': true,\n     *\n     *   // treat as queue, removing benchmarks from front of `benches` until empty\n     *   'queued': true,\n     *\n     *   // called before any benchmarks have been invoked.\n     *   'onStart': onStart,\n     *\n     *   // called between invoking benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called after all benchmarks have been invoked.\n     *   'onComplete': onComplete\n     * });\n     */\n    function invoke(benches, name) {\n      var args,\n          bench,\n          queued,\n          index = -1,\n          eventProps = { 'currentTarget': benches },\n          options = { 'onStart': _.noop, 'onCycle': _.noop, 'onComplete': _.noop },\n          result = _.toArray(benches);\n\n      /**\n       * Invokes the method of the current object and if synchronous, fetches the next.\n       */\n      function execute() {\n        var listeners,\n            async = isAsync(bench);\n\n        if (async) {\n          // Use `getNext` as the first listener.\n          bench.on('complete', getNext);\n          listeners = bench.events.complete;\n          listeners.splice(0, 0, listeners.pop());\n        }\n        // Execute method.\n        result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined;\n        // If synchronous return `true` until finished.\n        return !async && getNext();\n      }\n\n      /**\n       * Fetches the next bench or executes `onComplete` callback.\n       */\n      function getNext(event) {\n        var cycleEvent,\n            last = bench,\n            async = isAsync(last);\n\n        if (async) {\n          last.off('complete', getNext);\n          last.emit('complete');\n        }\n        // Emit \"cycle\" event.\n        eventProps.type = 'cycle';\n        eventProps.target = last;\n        cycleEvent = Event(eventProps);\n        options.onCycle.call(benches, cycleEvent);\n\n        // Choose next benchmark if not exiting early.\n        if (!cycleEvent.aborted && raiseIndex() !== false) {\n          bench = queued ? benches[0] : result[index];\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          }\n          else if (async) {\n            // Resume execution if previously asynchronous but now synchronous.\n            while (execute()) {}\n          }\n          else {\n            // Continue synchronous execution.\n            return true;\n          }\n        } else {\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // When used as a listener `event.aborted = true` will cancel the rest of\n        // the \"complete\" listeners because they were already called above and when\n        // used as part of `getNext` the `return false` will exit the execution while-loop.\n        if (event) {\n          event.aborted = true;\n        } else {\n          return false;\n        }\n      }\n\n      /**\n       * Checks if invoking `Benchmark#run` with asynchronous cycles.\n       */\n      function isAsync(object) {\n        // Avoid using `instanceof` here because of IE memory leak issues with host objects.\n        var async = args[0] && args[0].async;\n        return name == 'run' && (object instanceof Benchmark) &&\n          ((async == null ? object.options.async : async) && support.timeout || object.defer);\n      }\n\n      /**\n       * Raises `index` to the next defined index or returns `false`.\n       */\n      function raiseIndex() {\n        index++;\n\n        // If queued remove the previous bench.\n        if (queued && index > 0) {\n          shift.call(benches);\n        }\n        // If we reached the last index then return `false`.\n        return (queued ? benches.length : index < result.length)\n          ? index\n          : (index = false);\n      }\n      // Juggle arguments.\n      if (_.isString(name)) {\n        // 2 arguments (array, name).\n        args = slice.call(arguments, 2);\n      } else {\n        // 2 arguments (array, options).\n        options = _.assign(options, name);\n        name = options.name;\n        args = _.isArray(args = 'args' in options ? options.args : []) ? args : [args];\n        queued = options.queued;\n      }\n      // Start iterating over the array.\n      if (raiseIndex() !== false) {\n        // Emit \"start\" event.\n        bench = result[index];\n        eventProps.type = 'start';\n        eventProps.target = bench;\n        options.onStart.call(benches, Event(eventProps));\n\n        // End early if the suite was aborted in an \"onStart\" listener.\n        if (name == 'run' && (benches instanceof Suite) && benches.aborted) {\n          // Emit \"cycle\" event.\n          eventProps.type = 'cycle';\n          options.onCycle.call(benches, Event(eventProps));\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // Start method execution.\n        else {\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          } else {\n            while (execute()) {}\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a string of joined array values or object key-value pairs.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array|Object} object The object to operate on.\n     * @param {string} [separator1=','] The separator used between key-value pairs.\n     * @param {string} [separator2=': '] The separator used between keys and values.\n     * @returns {string} The joined result.\n     */\n    function join(object, separator1, separator2) {\n      var result = [],\n          length = (object = Object(object)).length,\n          arrayLike = length === length >>> 0;\n\n      separator2 || (separator2 = ': ');\n      _.each(object, function(value, key) {\n        result.push(arrayLike ? value : key + separator2 + value);\n      });\n      return result.join(separator1 || ',');\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts all benchmarks in the suite.\n     *\n     * @name abort\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function abortSuite() {\n      var event,\n          suite = this,\n          resetting = calledBy.resetSuite;\n\n      if (suite.running) {\n        event = Event('abort');\n        suite.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abortSuite = true;\n          suite.reset();\n          delete calledBy.abortSuite;\n\n          if (!resetting) {\n            suite.aborted = true;\n            invoke(suite, 'abort');\n          }\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Adds a test to the benchmark suite.\n     *\n     * @memberOf Benchmark.Suite\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.add(fn);\n     *\n     * // or using a name first\n     * suite.add('foo', fn);\n     *\n     * // or with options\n     * suite.add('foo', fn, {\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or name and options\n     * suite.add('foo', {\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or options only\n     * suite.add({\n     *   'name': 'foo',\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     */\n    function add(name, fn, options) {\n      var suite = this,\n          bench = new Benchmark(name, fn, options),\n          event = Event({ 'type': 'add', 'target': bench });\n\n      if (suite.emit(event), !event.cancelled) {\n        suite.push(bench);\n      }\n      return suite;\n    }\n\n    /**\n     * Creates a new suite with cloned benchmarks.\n     *\n     * @name clone\n     * @memberOf Benchmark.Suite\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new suite instance.\n     */\n    function cloneSuite(options) {\n      var suite = this,\n          result = new suite.constructor(_.assign({}, suite.options, options));\n\n      // Copy own properties.\n      _.forOwn(suite, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = value && _.isFunction(value.clone)\n            ? value.clone()\n            : cloneDeep(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * An `Array#filter` like method.\n     *\n     * @name filter\n     * @memberOf Benchmark.Suite\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Object} A new suite of benchmarks that passed callback filter.\n     */\n    function filterSuite(callback) {\n      var suite = this,\n          result = new suite.constructor(suite.options);\n\n      result.push.apply(result, filter(suite, callback));\n      return result;\n    }\n\n    /**\n     * Resets all benchmarks in the suite.\n     *\n     * @name reset\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function resetSuite() {\n      var event,\n          suite = this,\n          aborting = calledBy.abortSuite;\n\n      if (suite.running && !aborting) {\n        // No worries, `resetSuite()` is called within `abortSuite()`.\n        calledBy.resetSuite = true;\n        suite.abort();\n        delete calledBy.resetSuite;\n      }\n      // Reset if the state has changed.\n      else if ((suite.aborted || suite.running) &&\n          (suite.emit(event = Event('reset')), !event.cancelled)) {\n        suite.aborted = suite.running = false;\n        if (!aborting) {\n          invoke(suite, 'reset');\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Runs the suite.\n     *\n     * @name run\n     * @memberOf Benchmark.Suite\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.run();\n     *\n     * // or with options\n     * suite.run({ 'async': true, 'queued': true });\n     */\n    function runSuite(options) {\n      var suite = this;\n\n      suite.reset();\n      suite.running = true;\n      options || (options = {});\n\n      invoke(suite, {\n        'name': 'run',\n        'args': options,\n        'queued': options.queued,\n        'onStart': function(event) {\n          suite.emit(event);\n        },\n        'onCycle': function(event) {\n          var bench = event.target;\n          if (bench.error) {\n            suite.emit({ 'type': 'error', 'target': bench });\n          }\n          suite.emit(event);\n          event.aborted = suite.aborted;\n        },\n        'onComplete': function(event) {\n          suite.running = false;\n          suite.emit(event);\n        }\n      });\n      return suite;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Executes all registered listeners of the specified event type.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {Object|string} type The event type or object.\n     * @param {...*} [args] Arguments to invoke the listener with.\n     * @returns {*} Returns the return value of the last listener executed.\n     */\n    function emit(type) {\n      var listeners,\n          object = this,\n          event = Event(type),\n          events = object.events,\n          args = (arguments[0] = event, arguments);\n\n      event.currentTarget || (event.currentTarget = object);\n      event.target || (event.target = object);\n      delete event.result;\n\n      if (events && (listeners = _.has(events, event.type) && events[event.type])) {\n        _.each(listeners.slice(), function(listener) {\n          if ((event.result = listener.apply(object, args)) === false) {\n            event.cancelled = true;\n          }\n          return !event.aborted;\n        });\n      }\n      return event.result;\n    }\n\n    /**\n     * Returns an array of event listeners for a given type that can be manipulated\n     * to add or remove listeners.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @returns {Array} The listeners array.\n     */\n    function listeners(type) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      return _.has(events, type) ? events[type] : (events[type] = []);\n    }\n\n    /**\n     * Unregisters a listener for the specified event type(s),\n     * or unregisters all listeners for the specified event type(s),\n     * or unregisters all listeners for all event types.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} [type] The event type.\n     * @param {Function} [listener] The function to unregister.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // unregister a listener for an event type\n     * bench.off('cycle', listener);\n     *\n     * // unregister a listener for multiple event types\n     * bench.off('start cycle', listener);\n     *\n     * // unregister all listeners for an event type\n     * bench.off('cycle');\n     *\n     * // unregister all listeners for multiple event types\n     * bench.off('start cycle complete');\n     *\n     * // unregister all listeners for all event types\n     * bench.off();\n     */\n    function off(type, listener) {\n      var object = this,\n          events = object.events;\n\n      if (!events) {\n        return object;\n      }\n      _.each(type ? type.split(' ') : events, function(listeners, type) {\n        var index;\n        if (typeof listeners == 'string') {\n          type = listeners;\n          listeners = _.has(events, type) && events[type];\n        }\n        if (listeners) {\n          if (listener) {\n            index = _.indexOf(listeners, listener);\n            if (index > -1) {\n              listeners.splice(index, 1);\n            }\n          } else {\n            listeners.length = 0;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * Registers a listener for the specified event type(s).\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @param {Function} listener The function to register.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // register a listener for an event type\n     * bench.on('cycle', listener);\n     *\n     * // register a listener for multiple event types\n     * bench.on('start cycle', listener);\n     */\n    function on(type, listener) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      _.each(type.split(' '), function(type) {\n        (_.has(events, type)\n          ? events[type]\n          : (events[type] = [])\n        ).push(listener);\n      });\n      return object;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts the benchmark without recording times.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function abort() {\n      var event,\n          bench = this,\n          resetting = calledBy.reset;\n\n      if (bench.running) {\n        event = Event('abort');\n        bench.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abort = true;\n          bench.reset();\n          delete calledBy.abort;\n\n          if (support.timeout) {\n            clearTimeout(bench._timerId);\n            delete bench._timerId;\n          }\n          if (!resetting) {\n            bench.aborted = true;\n            bench.running = false;\n          }\n        }\n      }\n      return bench;\n    }\n\n    /**\n     * Creates a new benchmark using the same test and options.\n     *\n     * @memberOf Benchmark\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new benchmark instance.\n     * @example\n     *\n     * var bizarro = bench.clone({\n     *   'name': 'doppelganger'\n     * });\n     */\n    function clone(options) {\n      var bench = this,\n          result = new bench.constructor(_.assign({}, bench, options));\n\n      // Correct the `options` object.\n      result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));\n\n      // Copy own custom properties.\n      _.forOwn(bench, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = cloneDeep(value);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Determines if a benchmark is faster than another.\n     *\n     * @memberOf Benchmark\n     * @param {Object} other The benchmark to compare.\n     * @returns {number} Returns `-1` if slower, `1` if faster, and `0` if indeterminate.\n     */\n    function compare(other) {\n      var bench = this;\n\n      // Exit early if comparing the same benchmark.\n      if (bench == other) {\n        return 0;\n      }\n      var critical,\n          zStat,\n          sample1 = bench.stats.sample,\n          sample2 = other.stats.sample,\n          size1 = sample1.length,\n          size2 = sample2.length,\n          maxSize = max(size1, size2),\n          minSize = min(size1, size2),\n          u1 = getU(sample1, sample2),\n          u2 = getU(sample2, sample1),\n          u = min(u1, u2);\n\n      function getScore(xA, sampleB) {\n        return _.reduce(sampleB, function(total, xB) {\n          return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);\n        }, 0);\n      }\n\n      function getU(sampleA, sampleB) {\n        return _.reduce(sampleA, function(total, xA) {\n          return total + getScore(xA, sampleB);\n        }, 0);\n      }\n\n      function getZ(u) {\n        return (u - ((size1 * size2) / 2)) / sqrt((size1 * size2 * (size1 + size2 + 1)) / 12);\n      }\n      // Reject the null hypothesis the two samples come from the\n      // same population (i.e. have the same median) if...\n      if (size1 + size2 > 30) {\n        // ...the z-stat is greater than 1.96 or less than -1.96\n        // http://www.statisticslectures.com/topics/mannwhitneyu/\n        zStat = getZ(u);\n        return abs(zStat) > 1.96 ? (u == u1 ? 1 : -1) : 0;\n      }\n      // ...the U value is less than or equal the critical U value.\n      critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];\n      return u <= critical ? (u == u1 ? 1 : -1) : 0;\n    }\n\n    /**\n     * Reset properties and abort if running.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function reset() {\n      var bench = this;\n      if (bench.running && !calledBy.abort) {\n        // No worries, `reset()` is called within `abort()`.\n        calledBy.reset = true;\n        bench.abort();\n        delete calledBy.reset;\n        return bench;\n      }\n      var event,\n          index = 0,\n          changes = [],\n          queue = [];\n\n      // A non-recursive solution to check if properties have changed.\n      // For more information see http://www.jslab.dk/articles/non.recursive.preorder.traversal.part4.\n      var data = {\n        'destination': bench,\n        'source': _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))\n      };\n\n      do {\n        _.forOwn(data.source, function(value, key) {\n          var changed,\n              destination = data.destination,\n              currValue = destination[key];\n\n          // Skip pseudo private properties like `_timerId` which could be a\n          // Java object in environments like RingoJS.\n          if (key.charAt(0) == '_') {\n            return;\n          }\n          if (value && typeof value == 'object') {\n            if (_.isArray(value)) {\n              // Check if an array value has changed to a non-array value.\n              if (!_.isArray(currValue)) {\n                changed = currValue = [];\n              }\n              // Check if an array has changed its length.\n              if (currValue.length != value.length) {\n                changed = currValue = currValue.slice(0, value.length);\n                currValue.length = value.length;\n              }\n            }\n            // Check if an object has changed to a non-object value.\n            else if (!currValue || typeof currValue != 'object') {\n              changed = currValue = {};\n            }\n            // Register a changed object.\n            if (changed) {\n              changes.push({ 'destination': destination, 'key': key, 'value': currValue });\n            }\n            queue.push({ 'destination': currValue, 'source': value });\n          }\n          // Register a changed primitive.\n          else if (value !== currValue && !(value == null || _.isFunction(value))) {\n            changes.push({ 'destination': destination, 'key': key, 'value': value });\n          }\n        });\n      }\n      while ((data = queue[index++]));\n\n      // If changed emit the `reset` event and if it isn't cancelled reset the benchmark.\n      if (changes.length && (bench.emit(event = Event('reset')), !event.cancelled)) {\n        _.each(changes, function(data) {\n          data.destination[data.key] = data.value;\n        });\n      }\n      return bench;\n    }\n\n    /**\n     * Displays relevant benchmark information when coerced to a string.\n     *\n     * @name toString\n     * @memberOf Benchmark\n     * @returns {string} A string representation of the benchmark instance.\n     */\n    function toStringBench() {\n      var bench = this,\n          error = bench.error,\n          hz = bench.hz,\n          id = bench.id,\n          stats = bench.stats,\n          size = stats.sample.length,\n          pm = '\\xb1',\n          result = bench.name || (_.isNaN(id) ? id : '<Test #' + id + '>');\n\n      if (error) {\n        result += ': ' + join(error);\n      } else {\n        result += ' x ' + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + ' ops/sec ' + pm +\n          stats.rme.toFixed(2) + '% (' + size + ' run' + (size == 1 ? '' : 's') + ' sampled)';\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clocks the time taken to execute a test per cycle (secs).\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @returns {number} The time taken.\n     */\n    function clock() {\n      var options = Benchmark.options,\n          templateData = {},\n          timers = [{ 'ns': timer.ns, 'res': max(0.0015, getRes('ms')), 'unit': 'ms' }];\n\n      // Lazy define for hi-res timers.\n      clock = function(clone) {\n        var deferred;\n\n        if (clone instanceof Deferred) {\n          deferred = clone;\n          clone = deferred.benchmark;\n        }\n        var bench = clone._original,\n            stringable = isStringable(bench.fn),\n            count = bench.count = clone.count,\n            decompilable = stringable || (support.decompilation && (clone.setup !== _.noop || clone.teardown !== _.noop)),\n            id = bench.id,\n            name = bench.name || (typeof id == 'number' ? '<Test #' + id + '>' : id),\n            result = 0;\n\n        // Init `minTime` if needed.\n        clone.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);\n\n        // Compile in setup/teardown functions and the test loop.\n        // Create a new compiled test, instead of using the cached `bench.compiled`,\n        // to avoid potential engine optimizations enabled over the life of the test.\n        var funcBody = deferred\n          ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;' +\n            // When `deferred.cycles` is `0` then...\n            'if(!d#.cycles){' +\n            // set `deferred.fn`,\n            'd#.fn=function(){var ${fnArg}=d#;if(typeof f#==\"function\"){try{${fn}\\n}catch(e#){f#(d#)}}else{${fn}\\n}};' +\n            // set `deferred.teardown`,\n            'd#.teardown=function(){d#.cycles=0;if(typeof td#==\"function\"){try{${teardown}\\n}catch(e#){td#()}}else{${teardown}\\n}};' +\n            // execute the benchmark's `setup`,\n            'if(typeof su#==\"function\"){try{${setup}\\n}catch(e#){su#()}}else{${setup}\\n};' +\n            // start timer,\n            't#.start(d#);' +\n            // and then execute `deferred.fn` and return a dummy object.\n            '}d#.fn();return{uid:\"${uid}\"}'\n\n          : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\\n${begin};' +\n            'while(i#--){${fn}\\n}${end};${teardown}\\nreturn{elapsed:r#,uid:\"${uid}\"}';\n\n        var compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody),\n            isEmpty = !(templateData.fn || stringable);\n\n        try {\n          if (isEmpty) {\n            // Firefox may remove dead code from `Function#toString` results.\n            // For more information see http://bugzil.la/536085.\n            throw new Error('The test \"' + name + '\" is empty. This may be the result of dead code removal.');\n          }\n          else if (!deferred) {\n            // Pretest to determine if compiled code exits early, usually by a\n            // rogue `return` statement, by checking for a return object with the uid.\n            bench.count = 1;\n            compiled = decompilable && (compiled.call(bench, context, timer) || {}).uid == templateData.uid && compiled;\n            bench.count = count;\n          }\n        } catch(e) {\n          compiled = null;\n          clone.error = e || new Error(String(e));\n          bench.count = count;\n        }\n        // Fallback when a test exits early or errors during pretest.\n        if (!compiled && !deferred && !isEmpty) {\n          funcBody = (\n            stringable || (decompilable && !clone.error)\n              ? 'function f#(){${fn}\\n}var r#,s#,m#=this,i#=m#.count'\n              : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count'\n            ) +\n            ',n#=t#.ns;${setup}\\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};' +\n            'delete m#.f#;${teardown}\\nreturn{elapsed:r#}';\n\n          compiled = createCompiled(bench, decompilable, deferred, funcBody);\n\n          try {\n            // Pretest one more time to check for errors.\n            bench.count = 1;\n            compiled.call(bench, context, timer);\n            bench.count = count;\n            delete clone.error;\n          }\n          catch(e) {\n            bench.count = count;\n            if (!clone.error) {\n              clone.error = e || new Error(String(e));\n            }\n          }\n        }\n        // If no errors run the full test loop.\n        if (!clone.error) {\n          compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody);\n          result = compiled.call(deferred || bench, context, timer).elapsed;\n        }\n        return result;\n      };\n\n      /*----------------------------------------------------------------------*/\n\n      /**\n       * Creates a compiled function from the given function `body`.\n       */\n      function createCompiled(bench, decompilable, deferred, body) {\n        var fn = bench.fn,\n            fnArg = deferred ? getFirstArgument(fn) || 'deferred' : '';\n\n        templateData.uid = uid + uidCounter++;\n\n        _.assign(templateData, {\n          'setup': decompilable ? getSource(bench.setup) : interpolate('m#.setup()'),\n          'fn': decompilable ? getSource(fn) : interpolate('m#.fn(' + fnArg + ')'),\n          'fnArg': fnArg,\n          'teardown': decompilable ? getSource(bench.teardown) : interpolate('m#.teardown()')\n        });\n\n        // Use API of chosen timer.\n        if (timer.unit == 'ns') {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#()'),\n            'end': interpolate('r#=n#(s#);r#=r#[0]+(r#[1]/1e9)')\n          });\n        }\n        else if (timer.unit == 'us') {\n          if (timer.ns.stop) {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#.start()'),\n              'end': interpolate('r#=n#.microseconds()/1e6')\n            });\n          } else {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#()'),\n              'end': interpolate('r#=(n#()-s#)/1e6')\n            });\n          }\n        }\n        else if (timer.ns.now) {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#.now()'),\n            'end': interpolate('r#=(n#.now()-s#)/1e3')\n          });\n        }\n        else {\n          _.assign(templateData, {\n            'begin': interpolate('s#=new n#().getTime()'),\n            'end': interpolate('r#=(new n#().getTime()-s#)/1e3')\n          });\n        }\n        // Define `timer` methods.\n        timer.start = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#')\n        );\n\n        timer.stop = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#')\n        );\n\n        // Create compiled test.\n        return createFunction(\n          interpolate('window,t#'),\n          'var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\\n' +\n          interpolate(body)\n        );\n      }\n\n      /**\n       * Gets the current timer's minimum resolution (secs).\n       */\n      function getRes(unit) {\n        var measured,\n            begin,\n            count = 30,\n            divisor = 1e3,\n            ns = timer.ns,\n            sample = [];\n\n        // Get average smallest measurable time.\n        while (count--) {\n          if (unit == 'us') {\n            divisor = 1e6;\n            if (ns.stop) {\n              ns.start();\n              while (!(measured = ns.microseconds())) {}\n            } else {\n              begin = ns();\n              while (!(measured = ns() - begin)) {}\n            }\n          }\n          else if (unit == 'ns') {\n            divisor = 1e9;\n            begin = (begin = ns())[0] + (begin[1] / divisor);\n            while (!(measured = ((measured = ns())[0] + (measured[1] / divisor)) - begin)) {}\n            divisor = 1;\n          }\n          else if (ns.now) {\n            begin = ns.now();\n            while (!(measured = ns.now() - begin)) {}\n          }\n          else {\n            begin = new ns().getTime();\n            while (!(measured = new ns().getTime() - begin)) {}\n          }\n          // Check for broken timers.\n          if (measured > 0) {\n            sample.push(measured);\n          } else {\n            sample.push(Infinity);\n            break;\n          }\n        }\n        // Convert to seconds.\n        return getMean(sample) / divisor;\n      }\n\n      /**\n       * Interpolates a given template string.\n       */\n      function interpolate(string) {\n        // Replaces all occurrences of `#` with a unique number and template tokens with content.\n        return _.template(string.replace(/\\#/g, /\\d+/.exec(templateData.uid)))(templateData);\n      }\n\n      /*----------------------------------------------------------------------*/\n\n      // Detect Chrome's microsecond timer:\n      // enable benchmarking via the --enable-benchmarking command\n      // line switch in at least Chrome 7 to use chrome.Interval\n      try {\n        if ((timer.ns = new (context.chrome || context.chromium).Interval)) {\n          timers.push({ 'ns': timer.ns, 'res': getRes('us'), 'unit': 'us' });\n        }\n      } catch(e) {}\n\n      // Detect Node.js's nanosecond resolution timer available in Node.js >= 0.8.\n      if (processObject && typeof (timer.ns = processObject.hrtime) == 'function') {\n        timers.push({ 'ns': timer.ns, 'res': getRes('ns'), 'unit': 'ns' });\n      }\n      // Detect Wade Simmons' Node.js `microtime` module.\n      if (microtimeObject && typeof (timer.ns = microtimeObject.now) == 'function') {\n        timers.push({ 'ns': timer.ns,  'res': getRes('us'), 'unit': 'us' });\n      }\n      // Pick timer with highest resolution.\n      timer = _.minBy(timers, 'res');\n\n      // Error if there are no working timers.\n      if (timer.res == Infinity) {\n        throw new Error('Benchmark.js was unable to find a working timer.');\n      }\n      // Resolve time span required to achieve a percent uncertainty of at most 1%.\n      // For more information see http://spiff.rit.edu/classes/phys273/uncert/uncert.html.\n      options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));\n      return clock.apply(null, arguments);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Computes stats on benchmark results.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function compute(bench, options) {\n      options || (options = {});\n\n      var async = options.async,\n          elapsed = 0,\n          initCount = bench.initCount,\n          minSamples = bench.minSamples,\n          queue = [],\n          sample = bench.stats.sample;\n\n      /**\n       * Adds a clone to the queue.\n       */\n      function enqueue() {\n        queue.push(bench.clone({\n          '_original': bench,\n          'events': {\n            'abort': [update],\n            'cycle': [update],\n            'error': [update],\n            'start': [update]\n          }\n        }));\n      }\n\n      /**\n       * Updates the clone/original benchmarks to keep their data in sync.\n       */\n      function update(event) {\n        var clone = this,\n            type = event.type;\n\n        if (bench.running) {\n          if (type == 'start') {\n            // Note: `clone.minTime` prop is inited in `clock()`.\n            clone.count = bench.initCount;\n          }\n          else {\n            if (type == 'error') {\n              bench.error = clone.error;\n            }\n            if (type == 'abort') {\n              bench.abort();\n              bench.emit('cycle');\n            } else {\n              event.currentTarget = event.target = bench;\n              bench.emit(event);\n            }\n          }\n        } else if (bench.aborted) {\n          // Clear abort listeners to avoid triggering bench's abort/cycle again.\n          clone.events.abort.length = 0;\n          clone.abort();\n        }\n      }\n\n      /**\n       * Determines if more clones should be queued or if cycling should stop.\n       */\n      function evaluate(event) {\n        var critical,\n            df,\n            mean,\n            moe,\n            rme,\n            sd,\n            sem,\n            variance,\n            clone = event.target,\n            done = bench.aborted,\n            now = _.now(),\n            size = sample.push(clone.times.period),\n            maxedOut = size >= minSamples && (elapsed += now - clone.times.timeStamp) / 1e3 > bench.maxTime,\n            times = bench.times,\n            varOf = function(sum, x) { return sum + pow(x - mean, 2); };\n\n        // Exit early for aborted or unclockable tests.\n        if (done || clone.hz == Infinity) {\n          maxedOut = !(size = sample.length = queue.length = 0);\n        }\n\n        if (!done) {\n          // Compute the sample mean (estimate of the population mean).\n          mean = getMean(sample);\n          // Compute the sample variance (estimate of the population variance).\n          variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;\n          // Compute the sample standard deviation (estimate of the population standard deviation).\n          sd = sqrt(variance);\n          // Compute the standard error of the mean (a.k.a. the standard deviation of the sampling distribution of the sample mean).\n          sem = sd / sqrt(size);\n          // Compute the degrees of freedom.\n          df = size - 1;\n          // Compute the critical value.\n          critical = tTable[Math.round(df) || 1] || tTable.infinity;\n          // Compute the margin of error.\n          moe = sem * critical;\n          // Compute the relative margin of error.\n          rme = (moe / mean) * 100 || 0;\n\n          _.assign(bench.stats, {\n            'deviation': sd,\n            'mean': mean,\n            'moe': moe,\n            'rme': rme,\n            'sem': sem,\n            'variance': variance\n          });\n\n          // Abort the cycle loop when the minimum sample size has been collected\n          // and the elapsed time exceeds the maximum time allowed per benchmark.\n          // We don't count cycle delays toward the max time because delays may be\n          // increased by browsers that clamp timeouts for inactive tabs. For more\n          // information see https://developer.mozilla.org/en/window.setTimeout#Inactive_tabs.\n          if (maxedOut) {\n            // Reset the `initCount` in case the benchmark is rerun.\n            bench.initCount = initCount;\n            bench.running = false;\n            done = true;\n            times.elapsed = (now - times.timeStamp) / 1e3;\n          }\n          if (bench.hz != Infinity) {\n            bench.hz = 1 / mean;\n            times.cycle = mean * bench.count;\n            times.period = mean;\n          }\n        }\n        // If time permits, increase sample size to reduce the margin of error.\n        if (queue.length < 2 && !maxedOut) {\n          enqueue();\n        }\n        // Abort the `invoke` cycle when done.\n        event.aborted = done;\n      }\n\n      // Init queue and begin.\n      enqueue();\n      invoke(queue, {\n        'name': 'run',\n        'args': { 'async': async },\n        'queued': true,\n        'onCycle': evaluate,\n        'onComplete': function() { bench.emit('complete'); }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Cycles a benchmark until a run `count` can be established.\n     *\n     * @private\n     * @param {Object} clone The cloned benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function cycle(clone, options) {\n      options || (options = {});\n\n      var deferred;\n      if (clone instanceof Deferred) {\n        deferred = clone;\n        clone = clone.benchmark;\n      }\n      var clocked,\n          cycles,\n          divisor,\n          event,\n          minTime,\n          period,\n          async = options.async,\n          bench = clone._original,\n          count = clone.count,\n          times = clone.times;\n\n      // Continue, if not aborted between cycles.\n      if (clone.running) {\n        // `minTime` is set to `Benchmark.options.minTime` in `clock()`.\n        cycles = ++clone.cycles;\n        clocked = deferred ? deferred.elapsed : clock(clone);\n        minTime = clone.minTime;\n\n        if (cycles > bench.cycles) {\n          bench.cycles = cycles;\n        }\n        if (clone.error) {\n          event = Event('error');\n          event.message = clone.error;\n          clone.emit(event);\n          if (!event.cancelled) {\n            clone.abort();\n          }\n        }\n      }\n      // Continue, if not errored.\n      if (clone.running) {\n        // Compute the time taken to complete last test cycle.\n        bench.times.cycle = times.cycle = clocked;\n        // Compute the seconds per operation.\n        period = bench.times.period = times.period = clocked / count;\n        // Compute the ops per second.\n        bench.hz = clone.hz = 1 / period;\n        // Avoid working our way up to this next time.\n        bench.initCount = clone.initCount = count;\n        // Do we need to do another cycle?\n        clone.running = clocked < minTime;\n\n        if (clone.running) {\n          // Tests may clock at `0` when `initCount` is a small number,\n          // to avoid that we set its count to something a bit higher.\n          if (!clocked && (divisor = divisors[clone.cycles]) != null) {\n            count = floor(4e6 / divisor);\n          }\n          // Calculate how many more iterations it will take to achieve the `minTime`.\n          if (count <= clone.count) {\n            count += Math.ceil((minTime - clocked) / period);\n          }\n          clone.running = count != Infinity;\n        }\n      }\n      // Should we exit early?\n      event = Event('cycle');\n      clone.emit(event);\n      if (event.aborted) {\n        clone.abort();\n      }\n      // Figure out what to do next.\n      if (clone.running) {\n        // Start a new cycle.\n        clone.count = count;\n        if (deferred) {\n          clone.compiled.call(deferred, context, timer);\n        } else if (async) {\n          delay(clone, function() { cycle(clone, options); });\n        } else {\n          cycle(clone);\n        }\n      }\n      else {\n        // Fix TraceMonkey bug associated with clock fallbacks.\n        // For more information see http://bugzil.la/509069.\n        if (support.browser) {\n          runScript(uid + '=1;delete ' + uid);\n        }\n        // We're done.\n        clone.emit('complete');\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Runs the benchmark.\n     *\n     * @memberOf Benchmark\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The benchmark instance.\n     * @example\n     *\n     * // basic usage\n     * bench.run();\n     *\n     * // or with options\n     * bench.run({ 'async': true });\n     */\n    function run(options) {\n      var bench = this,\n          event = Event('start');\n\n      // Set `running` to `false` so `reset()` won't call `abort()`.\n      bench.running = false;\n      bench.reset();\n      bench.running = true;\n\n      bench.count = bench.initCount;\n      bench.times.timeStamp = _.now();\n      bench.emit(event);\n\n      if (!event.cancelled) {\n        options = { 'async': ((options = options && options.async) == null ? bench.async : options) && support.timeout };\n\n        // For clones created within `compute()`.\n        if (bench._original) {\n          if (bench.defer) {\n            Deferred(bench);\n          } else {\n            cycle(bench, options);\n          }\n        }\n        // For original benchmarks.\n        else {\n          compute(bench, options);\n        }\n      }\n      return bench;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Firefox 1 erroneously defines variable and argument names of functions on\n    // the function itself as non-configurable properties with `undefined` values.\n    // The bugginess continues as the `Benchmark` constructor has an argument\n    // named `options` and Firefox 1 will not assign a value to `Benchmark.options`,\n    // making it non-writable in the process, unless it is the first property\n    // assigned by for-in loop of `_.assign()`.\n    _.assign(Benchmark, {\n\n      /**\n       * The default options copied by benchmark instances.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'options': {\n\n        /**\n         * A flag to indicate that benchmark cycles will execute asynchronously\n         * by default.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'async': false,\n\n        /**\n         * A flag to indicate that the benchmark clock is deferred.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'defer': false,\n\n        /**\n         * The delay between test cycles (secs).\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'delay': 0.005,\n\n        /**\n         * Displayed by `Benchmark#toString` when a `name` is not available\n         * (auto-generated if absent).\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'id': undefined,\n\n        /**\n         * The default number of times to execute a test on a benchmark's first cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'initCount': 1,\n\n        /**\n         * The maximum time a benchmark is allowed to run before finishing (secs).\n         *\n         * Note: Cycle delays aren't counted toward the maximum time.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'maxTime': 5,\n\n        /**\n         * The minimum sample size required to perform statistical analysis.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minSamples': 5,\n\n        /**\n         * The time needed to reduce the percent uncertainty of measurement to 1% (secs).\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minTime': 0,\n\n        /**\n         * The name of the benchmark.\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'name': undefined,\n\n        /**\n         * An event listener called when the benchmark is aborted.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onAbort': undefined,\n\n        /**\n         * An event listener called when the benchmark completes running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onComplete': undefined,\n\n        /**\n         * An event listener called after each run cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onCycle': undefined,\n\n        /**\n         * An event listener called when a test errors.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onError': undefined,\n\n        /**\n         * An event listener called when the benchmark is reset.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onReset': undefined,\n\n        /**\n         * An event listener called when the benchmark starts running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onStart': undefined\n      },\n\n      /**\n       * Platform object with properties describing things like browser name,\n       * version, and operating system. See [`platform.js`](https://mths.be/platform).\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'platform': context.platform || require('platform') || ({\n        'description': context.navigator && context.navigator.userAgent || null,\n        'layout': null,\n        'product': null,\n        'name': null,\n        'manufacturer': null,\n        'os': null,\n        'prerelease': null,\n        'version': null,\n        'toString': function() {\n          return this.description || '';\n        }\n      }),\n\n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type string\n       */\n      'version': '2.1.1'\n    });\n\n    _.assign(Benchmark, {\n      'filter': filter,\n      'formatNumber': formatNumber,\n      'invoke': invoke,\n      'join': join,\n      'runInContext': runInContext,\n      'support': support\n    });\n\n    // Add lodash methods to Benchmark.\n    _.each(['each', 'forEach', 'forOwn', 'has', 'indexOf', 'map', 'reduce'], function(methodName) {\n      Benchmark[methodName] = _[methodName];\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Benchmark.prototype, {\n\n      /**\n       * The number of times a test was executed.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'count': 0,\n\n      /**\n       * The number of cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The number of executions per second.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'hz': 0,\n\n      /**\n       * The compiled test function.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'compiled': undefined,\n\n      /**\n       * The error object if the test failed.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'error': undefined,\n\n      /**\n       * The test to benchmark.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'fn': undefined,\n\n      /**\n       * A flag to indicate if the benchmark is aborted.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the benchmark is running.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'running': false,\n\n      /**\n       * Compiled into the test and executed immediately **before** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       * @example\n       *\n       * // basic usage\n       * var bench = Benchmark({\n       *   'setup': function() {\n       *     var c = this.count,\n       *         element = document.getElementById('container');\n       *     while (c--) {\n       *       element.appendChild(document.createElement('div'));\n       *     }\n       *   },\n       *   'fn': function() {\n       *     element.removeChild(element.lastChild);\n       *   }\n       * });\n       *\n       * // compiles to something like:\n       * var c = this.count,\n       *     element = document.getElementById('container');\n       * while (c--) {\n       *   element.appendChild(document.createElement('div'));\n       * }\n       * var start = new Date;\n       * while (count--) {\n       *   element.removeChild(element.lastChild);\n       * }\n       * var end = new Date - start;\n       *\n       * // or using strings\n       * var bench = Benchmark({\n       *   'setup': '\\\n       *     var a = 0;\\n\\\n       *     (function() {\\n\\\n       *       (function() {\\n\\\n       *         (function() {',\n       *   'fn': 'a += 1;',\n       *   'teardown': '\\\n       *          }())\\n\\\n       *        }())\\n\\\n       *      }())'\n       * });\n       *\n       * // compiles to something like:\n       * var a = 0;\n       * (function() {\n       *   (function() {\n       *     (function() {\n       *       var start = new Date;\n       *       while (count--) {\n       *         a += 1;\n       *       }\n       *       var end = new Date - start;\n       *     }())\n       *   }())\n       * }())\n       */\n      'setup': _.noop,\n\n      /**\n       * Compiled into the test and executed immediately **after** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'teardown': _.noop,\n\n      /**\n       * An object of stats including mean, margin or error, and standard deviation.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'stats': {\n\n        /**\n         * The margin of error.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'moe': 0,\n\n        /**\n         * The relative margin of error (expressed as a percentage of the mean).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'rme': 0,\n\n        /**\n         * The standard error of the mean.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'sem': 0,\n\n        /**\n         * The sample standard deviation.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'deviation': 0,\n\n        /**\n         * The sample arithmetic mean (secs).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'mean': 0,\n\n        /**\n         * The array of sampled periods.\n         *\n         * @memberOf Benchmark#stats\n         * @type Array\n         */\n        'sample': [],\n\n        /**\n         * The sample variance.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'variance': 0\n      },\n\n      /**\n       * An object of timing data including cycle, elapsed, period, start, and stop.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'times': {\n\n        /**\n         * The time taken to complete the last cycle (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'cycle': 0,\n\n        /**\n         * The time taken to complete the benchmark (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'elapsed': 0,\n\n        /**\n         * The time taken to execute the test once (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'period': 0,\n\n        /**\n         * A timestamp of when the benchmark started (ms).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'timeStamp': 0\n      }\n    });\n\n    _.assign(Benchmark.prototype, {\n      'abort': abort,\n      'clone': clone,\n      'compare': compare,\n      'emit': emit,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'reset': reset,\n      'run': run,\n      'toString': toStringBench\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Deferred.prototype, {\n\n      /**\n       * The deferred benchmark instance.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type Object\n       */\n      'benchmark': null,\n\n      /**\n       * The number of deferred cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The time taken to complete the deferred benchmark (secs).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'elapsed': 0,\n\n      /**\n       * A timestamp of when the deferred benchmark started (ms).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'timeStamp': 0\n    });\n\n    _.assign(Deferred.prototype, {\n      'resolve': resolve\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Event.prototype, {\n\n      /**\n       * A flag to indicate if the emitters listener iteration is aborted.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the default action is cancelled.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'cancelled': false,\n\n      /**\n       * The object whose listeners are currently being processed.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'currentTarget': undefined,\n\n      /**\n       * The return value of the last executed listener.\n       *\n       * @memberOf Benchmark.Event\n       * @type Mixed\n       */\n      'result': undefined,\n\n      /**\n       * The object to which the event was originally emitted.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'target': undefined,\n\n      /**\n       * A timestamp of when the event was created (ms).\n       *\n       * @memberOf Benchmark.Event\n       * @type number\n       */\n      'timeStamp': 0,\n\n      /**\n       * The event type.\n       *\n       * @memberOf Benchmark.Event\n       * @type string\n       */\n      'type': ''\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The default options copied by suite instances.\n     *\n     * @static\n     * @memberOf Benchmark.Suite\n     * @type Object\n     */\n    Suite.options = {\n\n      /**\n       * The name of the suite.\n       *\n       * @memberOf Benchmark.Suite.options\n       * @type string\n       */\n      'name': undefined\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Suite.prototype, {\n\n      /**\n       * The number of benchmarks in the suite.\n       *\n       * @memberOf Benchmark.Suite\n       * @type number\n       */\n      'length': 0,\n\n      /**\n       * A flag to indicate if the suite is aborted.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the suite is running.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'running': false\n    });\n\n    _.assign(Suite.prototype, {\n      'abort': abortSuite,\n      'add': add,\n      'clone': cloneSuite,\n      'emit': emit,\n      'filter': filterSuite,\n      'join': arrayRef.join,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'pop': arrayRef.pop,\n      'push': push,\n      'reset': resetSuite,\n      'run': runSuite,\n      'reverse': arrayRef.reverse,\n      'shift': shift,\n      'slice': slice,\n      'sort': arrayRef.sort,\n      'splice': arrayRef.splice,\n      'unshift': unshift\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Expose Deferred, Event, and Suite.\n    _.assign(Benchmark, {\n      'Deferred': Deferred,\n      'Event': Event,\n      'Suite': Suite\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Add lodash methods as Suite methods.\n    _.each(['each', 'forEach', 'indexOf', 'map', 'reduce'], function(methodName) {\n      var func = _[methodName];\n      Suite.prototype[methodName] = function() {\n        var args = [this];\n        push.apply(args, arguments);\n        return func.apply(_, args);\n      };\n    });\n\n    // Avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in Firefox < 10 and IE < 9.\n    _.each(['pop', 'shift', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n\n      Suite.prototype[methodName] = function() {\n        var value = this,\n            result = func.apply(value, arguments);\n\n        if (value.length === 0) {\n          delete value[0];\n        }\n        return result;\n      };\n    });\n\n    // Avoid buggy `Array#unshift` in IE < 8 which doesn't return the new\n    // length of the array.\n    Suite.prototype.unshift = function() {\n      var value = this;\n      unshift.apply(value, arguments);\n      return value.length;\n    };\n\n    return Benchmark;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export Benchmark.\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so, through path mapping, it can be aliased.\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\n  else {\n    var Benchmark = runInContext();\n\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = Benchmark).Benchmark = Benchmark;\n      }\n      // Export for CommonJS support.\n      freeExports.Benchmark = Benchmark;\n    }\n    else {\n      // Export to the global object.\n      root.Benchmark = Benchmark;\n    }\n  }\n}.call(this));\n\n\n/***/ },\n\n/***/ 91:\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * Platform.js v1.3.1 <http://mths.be/platform>\n * Copyright 2014-2016 Benjamin Tan <https://d10.github.io/>\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <http://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Opera regexp */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object */\n  var thisBinding = this;\n\n  /** Used for native method references */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // platform tokens defined at\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '6.4':  '10',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // detect Windows version from platform tokens\n    if (pattern && label && /^Win/i.test(os) &&\n        (data = data[0/*Opera 9.25 fix*/, /[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // correct character case and cleanup\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object */\n    var context = root;\n\n    /** Used to flag when a custom context is provided */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // juggle arguments\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope] */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environment */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based)\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]` */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime */\n    var data;\n\n    /** The CPU architecture */\n    var arch = ua;\n\n    /** Platform description array */\n    var description = [];\n\n    /** Platform alpha/beta indicator */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important) */\n    var layout = getLayout([\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important) */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      'Midori',\n      'Nook Browser',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      'Sunrise',\n      'Swiftfox',\n      'WebPositive',\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chrome',\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important) */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nook',\n      'PlayBook',\n      'PlayStation 4',\n      'PlayStation 3',\n      'PlayStation Vita',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }\n    });\n\n    /* Detectable OSes (order is important) */\n    var os = getOS([\n      'Windows Phone ',\n      'Android',\n      'CentOS',\n      'Debian',\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // lookup the manufacturer by product or scan the UA for the manufacturer\n        return result || (\n          value[product] ||\n          value[0/*Opera 9.25 fix*/, /^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // split by forward slash and append product version if needed\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // correct character case and cleanup\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // convert layout to an array so we can add extra details\n    layout && (layout = [layout]);\n\n    // detect product names that contain their manufacturer's name\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    }\n    // clean up Google TV\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // detect simulators\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // detect iOS\n    if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // detect Kubuntu\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // detect Android browsers\n    else if (manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // detect false positives for Firefox/Safari\n    else if (!name || (data = !/\\bMinefield\\b|\\(Android;/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // escape the `/` for Firefox 1\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // clear name of false positives\n        name = null;\n      }\n      // reassign a generic name\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // detect Firefox OS\n    if ((data = /\\((Mobile|Tablet).*?Firefox\\b/i.exec(ua)) && data[1]) {\n      os = 'Firefox OS';\n      if (!product) {\n        product = data[1];\n      }\n    }\n    // detect non-Opera versions (order is important)\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\\\d.]+$))',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // detect stubborn layout engines\n    if (layout == 'iCab' && parseFloat(version) > 3) {\n      layout = ['WebKit'];\n    } else if (\n        layout != 'Trident' &&\n        (data =\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident')\n        )\n    ) {\n      layout = [data];\n    }\n    // detect NetFront on PlayStation\n    else if (/\\bPlayStation\\b(?! Vita\\b)/i.test(name) && layout == 'WebKit') {\n      layout = ['NetFront'];\n    }\n    // detect Windows Phone 7 desktop mode\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // detect Windows Phone 8+ desktop mode\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8+';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // detect IE 11 and above\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (!/\\bWPDesktop\\b/i.test(ua)) {\n        if (name) {\n          description.push('identifying as ' + name + (version ? ' ' + version : ''));\n        }\n        name = 'IE';\n      }\n      version = data[1];\n    }\n    // detect Microsoft Edge\n    else if ((name == 'Chrome' || name != 'IE') && (data = /\\bEdge\\/([\\d.]+)/.exec(ua))) {\n      name = 'Microsoft Edge';\n      version = data[1];\n      layout = ['Trident'];\n    }\n    // leverage environment features\n    if (useFeatures) {\n      // detect server-side environments\n      // Rhino has a global function while others have a global object\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {\n          os || (os = data[0].os || null);\n          try {\n            data[1] = context.require('ringo/engine').version;\n            version = data[1].join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if (data[0].global.system == context.system) {\n              name = 'Narwhal';\n            }\n          }\n        }\n        else if (typeof context.process == 'object' && (data = context.process)) {\n          name = 'Node.js';\n          arch = data.arch;\n          os = data.platform;\n          version = /[\\d.]+/.exec(data.version)[0];\n        }\n        else if (rhino) {\n          name = 'Rhino';\n        }\n      }\n      // detect Adobe AIR\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // detect PhantomJS\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // detect IE compatibility modes\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // we're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      os = os && format(os);\n    }\n    // detect prerelease phases\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // detect Firefox Mobile\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // obscure Maxthon's unreliable version\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // detect Silk desktop/accelerated modes\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // detect Xbox 360 and Xbox One\n    else if (/\\bXbox\\b/i.test(product)) {\n      os = null;\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // add mobile postfix\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // detect IE platform preview\n    else if (name == 'IE' && useFeatures && context.external === null) {\n      description.unshift('platform preview');\n    }\n    // detect BlackBerry OS version\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // detect Opera identifying/masking itself as another browser\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && (\n          product != 'Wii' && (\n            (useFeatures && opera) ||\n            (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n            (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n            (name == 'IE' && (\n              (os && !/^Win/.test(os) && version > 5.5) ||\n              /\\bWindows XP\\b/.test(os) && version > 8 ||\n              version == 8 && !/\\bTrident\\b/.test(ua)\n            ))\n          )\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n\n      // when \"indentifying\", the UA contains both Opera and the other browser's name\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // when \"masking\", the UA contains only the other browser's name\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // detect WebKit Nightly and approximate Chrome/Safari versions\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // correct build for numeric comparison\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // nightly builds are postfixed with a `+`\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // clear incorrect browser versions\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // use the full Chrome version when available\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // detect Blink layout engine\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && name != 'IE' && name != 'Microsoft Edge') {\n        layout = ['Blink'];\n      }\n      // detect JavaScriptCore\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // add the postfix of \".x\" or \"+\" for approximate versions\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // obscure version for some Safari 1-2 releases\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      }\n    }\n    // detect Opera desktop modes\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // detect Chrome desktop mode\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // strip incorrect OS versions\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // add layout engine\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {\n      // don't add layout details to description if they are falsey\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // combine contextual information\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // append manufacturer\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // append product\n    if (product) {\n      description.push((/^on /.test(description[description.length -1]) ? '' : 'on ') + product);\n    }\n    // parse OS into an object\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // add browser/OS architecture\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\n       * \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // export platform\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (true) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n      return parse();\n    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    forOwn(parse(), function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  // in a browser or Rhino\n  else {\n    root.platform = parse();\n  }\n}.call(this));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(175)(module), __webpack_require__(174)))\n\n/***/ }\n\n},[178])\n});\n;\n\n\n// WEBPACK FOOTER //\n// performance-measurement.parallel.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 174\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 175\n// module chunks = 0","import * as Benchmark from \"benchmark\";\n/* tslint:disable:no-var-requires */\nconst platform = require(\"platform\");\n/* tslint:enable:no-var-requires */\n\nimport { createMandelOptions, parallelMandelbrot, syncMandelbrot } from \"./mandelbrot\";\nimport { IMonteCarloSimulationOptions, syncMonteCarlo, parallelMonteCarlo, IProject } from \"./monte-carlo\";\nimport {syncKnightTours, parallelKnightTours} from \"./knights-tour\";\n\nconst runButton = document.querySelector(\"#run\") as HTMLInputElement;\nconst outputTable = document.querySelector(\"#output-table\") as HTMLTableElement;\nconst jsonOutputField = document.querySelector(\"#json-output\") as HTMLElement;\nconst knightRunner6x6 = document.querySelector(\"#knight-runner-6-6\") as HTMLInputElement;\n\ntype Deferred = { resolve: () => void, reject: () => void };\n\nfunction addKnightBoardTests(suite: Benchmark.Suite) {\n    const boardSizes = knightRunner6x6.checked ? [5, 6] : [5];\n\n    for (const boardSize of boardSizes) {\n        suite.add(`Knights Tour (${boardSize}x${boardSize}) sync`, function () {\n            syncKnightTours({x: 0, y: 0}, boardSize);\n        });\n\n        suite.add(`Knights Tour (${boardSize}x${boardSize}) parallel`, function (deferred: Deferred) {\n            parallelKnightTours({x: 0, y: 0}, boardSize).then(() => deferred.resolve(), () => deferred.reject());\n        }, { defer: true });\n    }\n}\n\nfunction addMonteCarloTest(suite: Benchmark.Suite, options: IMonteCarloSimulationOptions, numberOfProjects: number) {\n    const runOptions = Object.assign(options, {\n        projects: createProjects(numberOfProjects)\n    });\n\n    suite.add(`Montecarlo ${numberOfProjects} sync`, function () {\n        syncMonteCarlo(options);\n    });\n\n    suite.add(`Monte carlo ${numberOfProjects} parallel`,\n        function (deferred: Deferred) {\n            return parallelMonteCarlo(runOptions).then(() => deferred.resolve(), () => deferred.reject());\n        }, { defer: true }\n    );\n}\n\nfunction addMonteCarloTests(suite: Benchmark.Suite) {\n    const monteCarloOptions = {\n        investmentAmount: 620000,\n        numRuns: 10000,\n        numYears: 15,\n        performance: 0.0340000,\n        seed: 10,\n        volatility: 0.0896000\n    };\n\n    for (const numberOfProjects of  [1, 2, 4, 6, 8, 10, 15]) {\n        addMonteCarloTest(suite, monteCarloOptions, numberOfProjects);\n    }\n}\n\nfunction addMandelbrotTests(suite: Benchmark.Suite) {\n    const mandelbrotHeight = parseInt((document.querySelector(\"#mandelbrot-height\") as HTMLInputElement).value, 10);\n    const mandelbrotWidth = parseInt((document.querySelector(\"#mandelbrot-width\") as HTMLInputElement).value, 10);\n    const mandelbrotIterations = parseInt((document.querySelector(\"#mandelbrot-iterations\") as HTMLInputElement).value, 10);\n\n    const mandelbrotOptions = createMandelOptions(mandelbrotWidth, mandelbrotHeight, mandelbrotIterations);\n\n    suite.add(`Mandelbrot ${mandelbrotWidth}x${mandelbrotHeight}, ${mandelbrotIterations} sync`, function () {\n        syncMandelbrot(mandelbrotOptions, () => undefined);\n    });\n\n    for (const maxValuesPerTask of [undefined, 1, 75, 150, 300, 600, 1200]) {\n        const title = `Mandelbrot ${mandelbrotOptions.imageWidth}x${mandelbrotOptions.imageHeight}, ${mandelbrotOptions.iterations} parallel (${maxValuesPerTask})`;\n        suite.add(title, function (deferred: Deferred) {\n            return parallelMandelbrot(mandelbrotOptions, { maxValuesPerTask }).then(() => deferred.resolve(), () => deferred.reject());\n        }, { defer: true });\n    }\n}\n\nfunction measure() {\n    const suite = new Benchmark.Suite();\n\n    addMonteCarloTests(suite);\n    addMandelbrotTests(suite);\n    addKnightBoardTests(suite);\n\n    suite.on(\"cycle\", function (event: Benchmark.Event) {\n        appendTestResults(event);\n    });\n    suite.on(\"complete\", function (event: Benchmark.Event) {\n        const benchmarks = (event.currentTarget as Array<Benchmark>).map((benchmark: Benchmark & {name: string }) => {\n            return {\n                info: benchmark.toString,\n                name: benchmark.name,\n                stats: benchmark.stats,\n                times: benchmark.times\n            };\n        });\n\n        jsonOutputField.textContent = JSON.stringify({ benchmarks, platform}, undefined, \"    \");\n        runButton.disabled = false;\n    });\n    suite.on(\"start\", initResultTable);\n\n    suite.run({async: true });\n}\n\nrunButton.addEventListener(\"click\", function (event: MouseEvent) {\n    event.preventDefault();\n    runButton.disabled = true;\n    measure();\n});\n\nfunction initResultTable(event: Benchmark.Event) {\n    clearOutputTable();\n\n    function clearOutputTable() {\n        while (outputTable.tBodies.length > 0) {\n            outputTable.removeChild(outputTable.tBodies[0]);\n        }\n    }\n\n    const body = outputTable.createTBody();\n    (event.currentTarget as Array<Benchmark.Options>).forEach(suite => {\n        const row = body.insertRow();\n        row.insertCell().textContent = suite.name!;\n        const columns = (outputTable.tHead.rows[0] as HTMLTableRowElement).cells.length;\n        for (let i = 0; i < columns; ++i) {\n            row.insertCell();\n        }\n    });\n}\n\nfunction appendTestResults(event: Benchmark.Event) {\n    const body = outputTable.tBodies[0] as HTMLTableSectionElement;\n    const benchmark = event.target as (Benchmark);\n    const index = (event.currentTarget as Array<Benchmark>).indexOf(benchmark);\n    const row = body.rows[index] as HTMLTableRowElement;\n\n    row.cells[1].textContent = benchmark.stats.deviation.toFixed(4);\n    row.cells[2].textContent = benchmark.stats.mean.toFixed(4);\n    row.cells[3].textContent = benchmark.stats.moe.toFixed(4);\n    row.cells[4].textContent = benchmark.stats.rme.toFixed(4);\n    row.cells[5].textContent = benchmark.stats.sem.toFixed(4);\n    row.cells[6].textContent = benchmark.stats.variance.toFixed(4);\n    row.cells[7].textContent = benchmark.stats.sample.length.toFixed(0);\n    row.cells[8].textContent = benchmark.hz.toFixed(4);\n}\n\nfunction createProjects(count: number): IProject[] {\n    const projects: IProject[] = [];\n\n    for (let i = 0; i < count; ++i) {\n        projects.push({\n            startYear: Math.round(Math.random() * 15),\n            totalAmount: Math.round(Math.random() * 100000)\n        });\n    }\n\n    return projects;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/performance-measurement.ts","import parallel from \"../src/api/browser\";\nimport {IParallelOptions} from \"../src/common/parallel/parallel-options\";\n\nexport interface ICoordinate {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport interface IKnightTourEnvironment {\n    boardSize: number;\n    board: number[];\n}\n\nfunction createEnvironment(boardSize: number): IKnightTourEnvironment {\n    const board: number[] = new Array(boardSize * boardSize);\n    board.fill(0);\n    return {\n        board,\n        boardSize\n    };\n}\n\nexport function knightTours(startPath: ICoordinate[], environment: IKnightTourEnvironment): number {\n    const moves = [\n        { x: -2, y: -1 }, { x: -2, y: 1}, { x: -1, y: -2 }, { x: -1, y: 2 },\n        { x: 1, y: -2 }, { x: 1, y: 2}, { x: 2, y: -1 }, { x: 2, y: 1 }\n    ];\n    const boardSize = environment.boardSize;\n    const board = environment.board;\n    const numberOfFields = boardSize * boardSize;\n    let results: number = 0;\n    const stack: { coordinate: ICoordinate, n: number }[] = startPath.map((pos, index) => ({ coordinate: pos, n: index + 1 }));\n\n    for (let index = 0; index < startPath.length - 1; ++index) {\n        const fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n\n    while (stack.length > 0) {\n        const { coordinate, n } = stack[stack.length - 1];\n        const fieldIndex = coordinate.x * boardSize + coordinate.y;\n\n        if (board[fieldIndex] !== 0) {\n            // back tracking\n            board[fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n\n        board[fieldIndex] = n!;\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize &&  successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n\n    return results;\n}\n\nexport function syncKnightTours(start: ICoordinate, boardSize: number): number {\n    const environment = createEnvironment(boardSize);\n    return knightTours([start], environment);\n}\n\nexport function parallelKnightTours(start: ICoordinate, boardSize: number, options?: IParallelOptions): PromiseLike<number> {\n\n    function successors(coordinate: ICoordinate) {\n        const moves = [\n            {x: -2, y: -1}, {x: -2, y: 1}, {x: -1, y: -2}, {x: -1, y: 2},\n            {x: 1, y: -2}, {x: 1, y: 2}, {x: 2, y: -1}, {x: 2, y: 1}\n        ];\n        const result: ICoordinate[] = [];\n\n        for (const move of moves) {\n            const successor = {x: coordinate.x + move.x, y: coordinate.y + move.y};\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize &&\n                (successor.x !== start.x || successor.y !== start.y) && (successor.x !== coordinate.x && successor.y !== coordinate.y);\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n\n        return result;\n    }\n\n    function computeStartFields() {\n        const result: ICoordinate[][] = [];\n        for (const directSuccessor of successors(start)) {\n            for (const indirectSuccessor of successors(directSuccessor)) {\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n\n    let total = 0;\n    let startTime = performance.now();\n    return parallel\n        .from(computeStartFields(), options)\n        .inEnvironment(createEnvironment, boardSize)\n        .map(knightTours)\n        .reduce(0, (memo, count) => memo + count)\n        .subscribe(subResults => {\n            for (const tours of subResults) {\n                total += tours;\n            }\n            /* tslint:disable:no-console */\n            console.log(`${total / (performance.now() - startTime) * 1000} results per second`);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/knights-tour.ts","import parallel from \"../src/api/browser\";\nimport {IParallelOptions} from \"../src/common/parallel/parallel-options\";\n\nexport interface IComplexNumber {\n    i: number;\n    real: number;\n}\n\nexport interface IMandelbrotOptions {\n    imageHeight: number;\n    imageWidth: number;\n    iterations: number;\n    max: IComplexNumber;\n    min: IComplexNumber;\n    scalingFactor: IComplexNumber;\n}\n\nexport function createMandelOptions(imageWidth: number, imageHeight: number, iterations: number): IMandelbrotOptions {\n    // X axis shows real numbers, y axis imaginary\n    const min = { i: -1.2, real: -2.0 };\n    const max = { i: 0, real: 1.0 };\n    max.i = min.i + (max.real - min.real) * imageHeight / imageWidth;\n\n    const scalingFactor = {\n        i: (max.i - min.i) / (imageHeight - 1),\n        real: (max.real - min.real) / (imageWidth - 1)\n    };\n\n    return {\n        imageHeight,\n        imageWidth,\n        iterations,\n        max,\n        min,\n        scalingFactor\n    };\n}\n\nexport function computeMandelbrotLine(y: number, options: IMandelbrotOptions): Uint8ClampedArray {\n    function calculateZ(c: IComplexNumber): { z: IComplexNumber, n: number } {\n        const z = { i: c.i, real: c.real };\n        let n = 0;\n\n        for (; n < options.iterations; ++n) {\n            if (z.real ** 2 + z.i ** 2 > 4) {\n                break;\n            }\n\n            // z ** 2 + c\n            const zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = z.real ** 2 - zI ** 2 + c.real;\n        }\n\n        return { z, n };\n    }\n\n    const line = new Uint8ClampedArray(options.imageWidth * 4);\n    const cI = options.max.i - y * options.scalingFactor.i;\n\n    for (let x = 0; x < options.imageWidth; ++x) {\n        const c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        const { n } = calculateZ(c);\n        const base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\n\nexport function parallelMandelbrot(mandelbrotOptions: IMandelbrotOptions, options?: IParallelOptions) {\n    return parallel\n        .range(0, mandelbrotOptions.imageHeight, 1, options)\n        .inEnvironment(mandelbrotOptions)\n        .map(computeMandelbrotLine);\n}\n\nexport function syncMandelbrot(mandelbrotOptions: IMandelbrotOptions, callback: (line: Uint8ClampedArray, y: number) => void) {\n    for (let y = 0; y < mandelbrotOptions.imageHeight; ++y) {\n        const line = computeMandelbrotLine(y, mandelbrotOptions);\n        callback(line, y);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/mandelbrot.ts","import parallel from \"../src/api/browser\";\nimport {Dictionary} from \"lodash\";\n\n/* tslint:disable:no-var-requires */\n// declare function require(name: string): any;\n// const Random = require(\"simjs-random\");\n// const random = new Random(10);\n\nexport interface IProject {\n    startYear: number;\n    totalAmount: number;\n}\n\ninterface IBucket {\n    min: number;\n    max: number;\n\n    subBuckets: { [groupName: string]: { group: string; min: number, max: number } };\n}\n\ninterface IGroup {\n    /**\n     * The unique name of this group\n     */\n    name: string;\n\n    /**\n     * The description of the group\n     */\n    description: string;\n\n    /**\n     * Should a separator line been drawn for this group?\n     */\n    separator: boolean;\n\n    /**\n     * Whats the percentage of values in this group to the total number of simulated values\n     */\n    percentage: number;\n\n    /**\n     * Whats the minimum value that is still part of this group\n     */\n    from?: number;\n    /**\n     * Whats the maximum value (exclusive) that defines the upper end of this group\n     */\n    to?: number;\n}\n\nexport interface IProjectResult {\n    /**\n     * The minimal simulated value for this project\n     */\n    min: number;\n    /**\n     * The maximal simulated value\n     */\n    max: number;\n\n    /** The median of the values found for this project\n     */\n    median: number;\n\n    /**\n     * Defines where the 2/3 of the simulated values start / end.\n     */\n    twoThird: {\n        min: number;\n        max: number;\n    };\n\n    buckets: IBucket[];\n\n    groups: IGroup[];\n\n    /**\n     * The project\n     */\n    project: IProject;\n}\n\ninterface IMonteCarloEnvironment {\n    investmentAmount: number;\n    liquidity: number;\n    noInterestReferenceLine: number[];\n    numRuns: number;\n    numYears: number;\n    projectsByStartYear: Dictionary<IProject[]>;\n    simulatedValues: number[][];\n}\n\nexport interface IMonteCarloSimulationOptions {\n    numYears?: number;\n    numRuns?: number;\n    projects?: IProject[];\n    investmentAmount?: number;\n    performance?: number;\n    seed?: number;\n    volatility: number;\n    liquidity?: number;\n}\n\ninterface IInitializedMonteCarloSimulationOptions {\n    numYears: number;\n    numRuns: number;\n    projects: IProject[];\n    investmentAmount: number;\n    performance: number;\n    seed?: number;\n    taskIndex?: number;\n    valuesPerWorker?: number;\n    liquidity: number;\n    volatility: number;\n}\n\nfunction initializeOptions(options?: IMonteCarloSimulationOptions): IInitializedMonteCarloSimulationOptions {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\n\nfunction createMonteCarloEnvironment(options: IInitializedMonteCarloSimulationOptions): IMonteCarloEnvironment {\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows: number[], numYears: number): number[][]  {\n        function toAbsoluteIndices(indices: number[]) {\n            let currentPortfolioValue = options.investmentAmount;\n            let previousYearIndex = 100;\n\n            for (let relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                const currentYearIndex = indices[relativeYear];\n                const cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n\n                // scale current value with performance gain according to index\n                const performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n\n                indices[relativeYear] = Math.round(currentPortfolioValue);\n                previousYearIndex = currentYearIndex;\n            }\n\n            return indices;\n        }\n\n        const result: number[][] = new Array(options.numYears);\n        for (let year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n\n        for (let run = 0; run < options.numRuns; run++) {\n            const indices = [100];\n\n            for (let i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                const randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n\n            for (let year = 0; year < indices.length; ++year) {\n                result[year][run] = indices[year];\n            }\n        }\n\n        return result;\n    }\n\n    function projectsToCashFlows() {\n        const cashFlows: number[] = [];\n        for (let year = 0; year < options.numYears; ++year) {\n            const projectsByThisYear = projectsByStartYear[year] || [];\n            const cashFlow = -projectsByThisYear.reduce((memo, project) => memo + project.totalAmount, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n\n    function calculateNoInterestReferenceLine(cashFlows: number[]) {\n        const noInterestReferenceLine: number[] = [];\n\n        let investmentAmountLeft = options.investmentAmount;\n        for (let year = 0; year < options.numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n\n    let projectsToSimulate: IProject[] = options.projects;\n\n    if (options.taskIndex && options.valuesPerWorker) {\n        projectsToSimulate = options.projects.slice(options.taskIndex * options.valuesPerWorker, (options.taskIndex + 1) * options.valuesPerWorker);\n    }\n\n    const projects = options.projects.sort((a, b) => a.startYear - b.startYear);\n\n    // Group projects by startYear, use lodash groupBy instead\n    const projectsByStartYear: Dictionary<IProject[]> = {};\n    for (let i = 0; i < projects.length; ++i) {\n        const project = projects[i];\n        const arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n\n    const cashFlows = projectsToCashFlows();\n    const noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows);\n\n    const numYears = projectsToSimulate.reduce((memo, project) => Math.max(memo, project.startYear), 0);\n\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears,\n        projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\n\nfunction calculateProject(project: IProject, environment: IMonteCarloEnvironment): IProjectResult {\n    const NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value: number, groups: IGroup[]): IGroup {\n        return groups.find(group => (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value))!;\n    }\n\n    function createGroups(requiredAmount: number, noInterestReference: number): IGroup[] {\n        return [\n            { description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true},\n            { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount },\n            { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity },\n            { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }\n        ];\n    }\n\n    function calculateRequiredAmount() {\n        let amount = project.totalAmount;\n        const projectsSameYear = environment.projectsByStartYear[project.startYear];\n\n        for (let i = 0; i < projectsSameYear.length; ++i) {\n            const otherProject = projectsSameYear[i];\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n\n    function median(values: number[]) {\n        const half = Math.floor(values.length / 2);\n\n        if (values.length % 2) {\n            return values[half];\n        }\n\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n\n    const requiredAmount = calculateRequiredAmount();\n    const simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort((a, b) => a - b);\n\n    const groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    const valuesByGroup: { [groupName: string]: number } = {};\n    const bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    const buckets: IBucket[] = [];\n\n    for (let i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        const bucket: IBucket = {\n            max: Number.MIN_VALUE,\n            min: Number.MAX_VALUE,\n            subBuckets: {}\n        };\n\n        for (let j = i; j < i + bucketSize; ++j) {\n            const value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n\n            const group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            const subBucket = bucket.subBuckets[group.name] = bucket.subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n\n        buckets.push(bucket);\n    }\n\n    const nonEmptyGroups = groups.filter(group => !!valuesByGroup[group.name]);\n    nonEmptyGroups.forEach(group => group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length);\n\n    const oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\n\nexport function syncMonteCarlo(options?: IMonteCarloSimulationOptions) {\n    const environment = createMonteCarloEnvironment(initializeOptions(options));\n\n    let projects: IProjectResult[] = [];\n    for (const project of options!.projects!) {\n        projects.push(calculateProject(project, environment));\n    }\n\n    return projects;\n}\n\nexport function parallelMonteCarlo(userOptions?: IMonteCarloSimulationOptions) {\n    const options = initializeOptions(userOptions);\n    return parallel\n        .from(options.projects, { minValuesPerTask: 2 })\n        .inEnvironment(createMonteCarloEnvironment, options)\n        .map(calculateProject);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/monte-carlo.ts","/*!\n * Benchmark.js <https://benchmarkjs.com/>\n * Copyright 2010-2016 Mathias Bynens <https://mths.be/>\n * Based on JSLitmus.js, copyright Robert Kieffer <http://broofa.com/>\n * Modified by John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used as a safe reference for `undefined` in pre ES5 environments. */\n  var undefined;\n\n  /** Used to determine if values are of the language type Object. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Detect free variable `define`. */\n  var freeDefine = typeof define == 'function' && typeof define.amd == 'object' && define.amd && define;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /** Detect free variable `require`. */\n  var freeRequire = typeof require == 'function' && require;\n\n  /** Used to assign each benchmark an incremented id. */\n  var counter = 0;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  /** Used to detect primitive types. */\n  var rePrimitive = /^(?:boolean|number|string|undefined)$/;\n\n  /** Used to make every compiled test unique. */\n  var uidCounter = 0;\n\n  /** Used to assign default `context` object properties. */\n  var contextProps = [\n    'Array', 'Date', 'Function', 'Math', 'Object', 'RegExp', 'String', '_',\n    'clearTimeout', 'chrome', 'chromium', 'document', 'navigator', 'phantom',\n    'platform', 'process', 'runtime', 'setTimeout'\n  ];\n\n  /** Used to avoid hz of Infinity. */\n  var divisors = {\n    '1': 4096,\n    '2': 512,\n    '3': 64,\n    '4': 8,\n    '5': 0\n  };\n\n  /**\n   * T-Distribution two-tailed critical values for 95% confidence.\n   * For more info see http://www.itl.nist.gov/div898/handbook/eda/section3/eda3672.htm.\n   */\n  var tTable = {\n    '1':  12.706, '2':  4.303, '3':  3.182, '4':  2.776, '5':  2.571, '6':  2.447,\n    '7':  2.365,  '8':  2.306, '9':  2.262, '10': 2.228, '11': 2.201, '12': 2.179,\n    '13': 2.16,   '14': 2.145, '15': 2.131, '16': 2.12,  '17': 2.11,  '18': 2.101,\n    '19': 2.093,  '20': 2.086, '21': 2.08,  '22': 2.074, '23': 2.069, '24': 2.064,\n    '25': 2.06,   '26': 2.056, '27': 2.052, '28': 2.048, '29': 2.045, '30': 2.042,\n    'infinity': 1.96\n  };\n\n  /**\n   * Critical Mann-Whitney U-values for 95% confidence.\n   * For more info see http://www.saburchill.com/IBbiology/stats/003.html.\n   */\n  var uTable = {\n    '5':  [0, 1, 2],\n    '6':  [1, 2, 3, 5],\n    '7':  [1, 3, 5, 6, 8],\n    '8':  [2, 4, 6, 8, 10, 13],\n    '9':  [2, 4, 7, 10, 12, 15, 17],\n    '10': [3, 5, 8, 11, 14, 17, 20, 23],\n    '11': [3, 6, 9, 13, 16, 19, 23, 26, 30],\n    '12': [4, 7, 11, 14, 18, 22, 26, 29, 33, 37],\n    '13': [4, 8, 12, 16, 20, 24, 28, 33, 37, 41, 45],\n    '14': [5, 9, 13, 17, 22, 26, 31, 36, 40, 45, 50, 55],\n    '15': [5, 10, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59, 64],\n    '16': [6, 11, 15, 21, 26, 31, 37, 42, 47, 53, 59, 64, 70, 75],\n    '17': [6, 11, 17, 22, 28, 34, 39, 45, 51, 57, 63, 67, 75, 81, 87],\n    '18': [7, 12, 18, 24, 30, 36, 42, 48, 55, 61, 67, 74, 80, 86, 93, 99],\n    '19': [7, 13, 19, 25, 32, 38, 45, 52, 58, 65, 72, 78, 85, 92, 99, 106, 113],\n    '20': [8, 14, 20, 27, 34, 41, 48, 55, 62, 69, 76, 83, 90, 98, 105, 112, 119, 127],\n    '21': [8, 15, 22, 29, 36, 43, 50, 58, 65, 73, 80, 88, 96, 103, 111, 119, 126, 134, 142],\n    '22': [9, 16, 23, 30, 38, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125, 133, 141, 150, 158],\n    '23': [9, 17, 24, 32, 40, 48, 56, 64, 73, 81, 89, 98, 106, 115, 123, 132, 140, 149, 157, 166, 175],\n    '24': [10, 17, 25, 33, 42, 50, 59, 67, 76, 85, 94, 102, 111, 120, 129, 138, 147, 156, 165, 174, 183, 192],\n    '25': [10, 18, 27, 35, 44, 53, 62, 71, 80, 89, 98, 107, 117, 126, 135, 145, 154, 163, 173, 182, 192, 201, 211],\n    '26': [11, 19, 28, 37, 46, 55, 64, 74, 83, 93, 102, 112, 122, 132, 141, 151, 161, 171, 181, 191, 200, 210, 220, 230],\n    '27': [11, 20, 29, 38, 48, 57, 67, 77, 87, 97, 107, 118, 125, 138, 147, 158, 168, 178, 188, 199, 209, 219, 230, 240, 250],\n    '28': [12, 21, 30, 40, 50, 60, 70, 80, 90, 101, 111, 122, 132, 143, 154, 164, 175, 186, 196, 207, 218, 228, 239, 250, 261, 272],\n    '29': [13, 22, 32, 42, 52, 62, 73, 83, 94, 105, 116, 127, 138, 149, 160, 171, 182, 193, 204, 215, 226, 238, 249, 260, 271, 282, 294],\n    '30': [13, 23, 33, 43, 54, 65, 76, 87, 98, 109, 120, 131, 143, 154, 166, 177, 189, 200, 212, 223, 235, 247, 258, 270, 282, 293, 305, 317]\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Create a new `Benchmark` function using the given `context` object.\n   *\n   * @static\n   * @memberOf Benchmark\n   * @param {Object} [context=root] The context object.\n   * @returns {Function} Returns a new `Benchmark` function.\n   */\n  function runInContext(context) {\n    // Exit early if unable to acquire lodash.\n    var _ = context && context._ || require('lodash') || root._;\n    if (!_) {\n      Benchmark.runInContext = runInContext;\n      return Benchmark;\n    }\n    // Avoid issues with some ES3 environments that attempt to use values, named\n    // after built-in constructors like `Object`, for the creation of literals.\n    // ES5 clears this up by stating that literals must use built-in constructors.\n    // See http://es5.github.io/#x11.1.5.\n    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;\n\n    /** Native constructor references. */\n    var Array = context.Array,\n        Date = context.Date,\n        Function = context.Function,\n        Math = context.Math,\n        Object = context.Object,\n        RegExp = context.RegExp,\n        String = context.String;\n\n    /** Used for `Array` and `Object` method references. */\n    var arrayRef = [],\n        objectProto = Object.prototype;\n\n    /** Native method shortcuts. */\n    var abs = Math.abs,\n        clearTimeout = context.clearTimeout,\n        floor = Math.floor,\n        log = Math.log,\n        max = Math.max,\n        min = Math.min,\n        pow = Math.pow,\n        push = arrayRef.push,\n        setTimeout = context.setTimeout,\n        shift = arrayRef.shift,\n        slice = arrayRef.slice,\n        sqrt = Math.sqrt,\n        toString = objectProto.toString,\n        unshift = arrayRef.unshift;\n\n    /** Used to avoid inclusion in Browserified bundles. */\n    var req = require;\n\n    /** Detect DOM document object. */\n    var doc = isHostType(context, 'document') && context.document;\n\n    /** Used to access Wade Simmons' Node.js `microtime` module. */\n    var microtimeObject = req('microtime');\n\n    /** Used to access Node.js's high resolution timer. */\n    var processObject = isHostType(context, 'process') && context.process;\n\n    /** Used to prevent a `removeChild` memory leak in IE < 9. */\n    var trash = doc && doc.createElement('div');\n\n    /** Used to integrity check compiled tests. */\n    var uid = 'uid' + _.now();\n\n    /** Used to avoid infinite recursion when methods call each other. */\n    var calledBy = {};\n\n    /**\n     * An object used to flag environments/features.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @type Object\n     */\n    var support = {};\n\n    (function() {\n\n      /**\n       * Detect if running in a browser environment.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.browser = doc && isHostType(context, 'navigator') && !isHostType(context, 'phantom');\n\n      /**\n       * Detect if the Timers API exists.\n       *\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      support.timeout = isHostType(context, 'setTimeout') && isHostType(context, 'clearTimeout');\n\n      /**\n       * Detect if function decompilation is support.\n       *\n       * @name decompilation\n       * @memberOf Benchmark.support\n       * @type boolean\n       */\n      try {\n        // Safari 2.x removes commas in object literals from `Function#toString` results.\n        // See http://webk.it/11609 for more details.\n        // Firefox 3.6 and Opera 9.25 strip grouping parentheses from `Function#toString` results.\n        // See http://bugzil.la/559438 for more details.\n        support.decompilation = Function(\n          ('return (' + (function(x) { return { 'x': '' + (1 + x) + '', 'y': 0 }; }) + ')')\n          // Avoid issues with code added by Istanbul.\n          .replace(/__cov__[^;]+;/g, '')\n        )()(0).x === '1';\n      } catch(e) {\n        support.decompilation = false;\n      }\n    }());\n\n    /**\n     * Timer object used by `clock()` and `Deferred#resolve`.\n     *\n     * @private\n     * @type Object\n     */\n    var timer = {\n\n      /**\n       * The timer namespace object or constructor.\n       *\n       * @private\n       * @memberOf timer\n       * @type {Function|Object}\n       */\n      'ns': Date,\n\n      /**\n       * Starts the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'start': null, // Lazy defined in `clock()`.\n\n      /**\n       * Stops the deferred timer.\n       *\n       * @private\n       * @memberOf timer\n       * @param {Object} deferred The deferred instance.\n       */\n      'stop': null // Lazy defined in `clock()`.\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The Benchmark constructor.\n     *\n     * Note: The Benchmark constructor exposes a handful of lodash methods to\n     * make working with arrays, collections, and objects easier. The lodash\n     * methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`forOwn`](https://lodash.com/docs#forOwn),\n     * [`has`](https://lodash.com/docs#has), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var bench = new Benchmark(fn);\n     *\n     * // or using a name first\n     * var bench = new Benchmark('foo', fn);\n     *\n     * // or with options\n     * var bench = new Benchmark('foo', fn, {\n     *\n     *   // displayed by `Benchmark#toString` if `name` is not available\n     *   'id': 'xyz',\n     *\n     *   // called when the benchmark starts running\n     *   'onStart': onStart,\n     *\n     *   // called after each run cycle\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the benchmark completes running\n     *   'onComplete': onComplete,\n     *\n     *   // compiled/called before the test loop\n     *   'setup': setup,\n     *\n     *   // compiled/called after the test loop\n     *   'teardown': teardown\n     * });\n     *\n     * // or name and options\n     * var bench = new Benchmark('foo', {\n     *\n     *   // a flag to indicate the benchmark is deferred\n     *   'defer': true,\n     *\n     *   // benchmark test function\n     *   'fn': function(deferred) {\n     *     // call `Deferred#resolve` when the deferred test is finished\n     *     deferred.resolve();\n     *   }\n     * });\n     *\n     * // or options only\n     * var bench = new Benchmark({\n     *\n     *   // benchmark name\n     *   'name': 'foo',\n     *\n     *   // benchmark test as a string\n     *   'fn': '[1,2,3,4].sort()'\n     * });\n     *\n     * // a test's `this` binding is set to the benchmark instance\n     * var bench = new Benchmark('foo', function() {\n     *   'My name is '.concat(this.name); // \"My name is foo\"\n     * });\n     */\n    function Benchmark(name, fn, options) {\n      var bench = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(bench instanceof Benchmark)) {\n        return new Benchmark(name, fn, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      }\n      else if (_.isFunction(name)) {\n        // 2 arguments (fn, options).\n        options = fn;\n        fn = name;\n      }\n      else if (_.isPlainObject(fn)) {\n        // 2 arguments (name, options).\n        options = fn;\n        fn = null;\n        bench.name = name;\n      }\n      else {\n        // 3 arguments (name, fn [, options]).\n        bench.name = name;\n      }\n      setOptions(bench, options);\n\n      bench.id || (bench.id = ++counter);\n      bench.fn == null && (bench.fn = fn);\n\n      bench.stats = cloneDeep(bench.stats);\n      bench.times = cloneDeep(bench.times);\n    }\n\n    /**\n     * The Deferred constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object} clone The cloned benchmark instance.\n     */\n    function Deferred(clone) {\n      var deferred = this;\n      if (!(deferred instanceof Deferred)) {\n        return new Deferred(clone);\n      }\n      deferred.benchmark = clone;\n      clock(deferred);\n    }\n\n    /**\n     * The Event constructor.\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {Object|string} type The event type.\n     */\n    function Event(type) {\n      var event = this;\n      if (type instanceof Event) {\n        return type;\n      }\n      return (event instanceof Event)\n        ? _.assign(event, { 'timeStamp': _.now() }, typeof type == 'string' ? { 'type': type } : type)\n        : new Event(type);\n    }\n\n    /**\n     * The Suite constructor.\n     *\n     * Note: Each Suite instance has a handful of wrapped lodash methods to\n     * make working with Suites easier. The wrapped lodash methods are:\n     * [`each/forEach`](https://lodash.com/docs#forEach), [`indexOf`](https://lodash.com/docs#indexOf),\n     * [`map`](https://lodash.com/docs#map), and [`reduce`](https://lodash.com/docs#reduce)\n     *\n     * @constructor\n     * @memberOf Benchmark\n     * @param {string} name A name to identify the suite.\n     * @param {Object} [options={}] Options object.\n     * @example\n     *\n     * // basic usage (the `new` operator is optional)\n     * var suite = new Benchmark.Suite;\n     *\n     * // or using a name first\n     * var suite = new Benchmark.Suite('foo');\n     *\n     * // or with options\n     * var suite = new Benchmark.Suite('foo', {\n     *\n     *   // called when the suite starts running\n     *   'onStart': onStart,\n     *\n     *   // called between running benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called when aborted\n     *   'onAbort': onAbort,\n     *\n     *   // called when a test errors\n     *   'onError': onError,\n     *\n     *   // called when reset\n     *   'onReset': onReset,\n     *\n     *   // called when the suite completes running\n     *   'onComplete': onComplete\n     * });\n     */\n    function Suite(name, options) {\n      var suite = this;\n\n      // Allow instance creation without the `new` operator.\n      if (!(suite instanceof Suite)) {\n        return new Suite(name, options);\n      }\n      // Juggle arguments.\n      if (_.isPlainObject(name)) {\n        // 1 argument (options).\n        options = name;\n      } else {\n        // 2 arguments (name [, options]).\n        suite.name = name;\n      }\n      setOptions(suite, options);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A specialized version of `_.cloneDeep` which only clones arrays and plain\n     * objects assigning all other values by reference.\n     *\n     * @private\n     * @param {*} value The value to clone.\n     * @returns {*} The cloned value.\n     */\n    var cloneDeep = _.partial(_.cloneDeepWith, _, function(value) {\n      // Only clone primitives, arrays, and plain objects.\n      return (_.isObject(value) && !_.isArray(value) && !_.isPlainObject(value))\n        ? value\n        : undefined;\n    });\n\n    /**\n     * Creates a function from the given arguments string and body.\n     *\n     * @private\n     * @param {string} args The comma separated function arguments.\n     * @param {string} body The function body.\n     * @returns {Function} The new function.\n     */\n    function createFunction() {\n      // Lazy define.\n      createFunction = function(args, body) {\n        var result,\n            anchor = freeDefine ? freeDefine.amd : Benchmark,\n            prop = uid + 'createFunction';\n\n        runScript((freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '=function(' + args + '){' + body + '}');\n        result = anchor[prop];\n        delete anchor[prop];\n        return result;\n      };\n      // Fix JaegerMonkey bug.\n      // For more information see http://bugzil.la/639720.\n      createFunction = support.browser && (createFunction('', 'return\"' + uid + '\"') || _.noop)() == uid ? createFunction : Function;\n      return createFunction.apply(null, arguments);\n    }\n\n    /**\n     * Delay the execution of a function based on the benchmark's `delay` property.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} fn The function to execute.\n     */\n    function delay(bench, fn) {\n      bench._timerId = _.delay(fn, bench.delay * 1e3);\n    }\n\n    /**\n     * Destroys the given element.\n     *\n     * @private\n     * @param {Element} element The element to destroy.\n     */\n    function destroyElement(element) {\n      trash.appendChild(element);\n      trash.innerHTML = '';\n    }\n\n    /**\n     * Gets the name of the first argument from a function's source.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The argument name.\n     */\n    function getFirstArgument(fn) {\n      return (!_.has(fn, 'toString') &&\n        (/^[\\s(]*function[^(]*\\(([^\\s,)]+)/.exec(fn) || 0)[1]) || '';\n    }\n\n    /**\n     * Computes the arithmetic mean of a sample.\n     *\n     * @private\n     * @param {Array} sample The sample.\n     * @returns {number} The mean.\n     */\n    function getMean(sample) {\n      return (_.reduce(sample, function(sum, x) {\n        return sum + x;\n      }) / sample.length) || 0;\n    }\n\n    /**\n     * Gets the source code of a function.\n     *\n     * @private\n     * @param {Function} fn The function.\n     * @returns {string} The function's source code.\n     */\n    function getSource(fn) {\n      var result = '';\n      if (isStringable(fn)) {\n        result = String(fn);\n      } else if (support.decompilation) {\n        // Escape the `{` for Firefox 1.\n        result = _.result(/^[^{]+\\{([\\s\\S]*)\\}\\s*$/.exec(fn), 1);\n      }\n      // Trim string.\n      result = (result || '').replace(/^\\s+|\\s+$/g, '');\n\n      // Detect strings containing only the \"use strict\" directive.\n      return /^(?:\\/\\*+[\\w\\W]*?\\*\\/|\\/\\/.*?[\\n\\r\\u2028\\u2029]|\\s)*([\"'])use strict\\1;?$/.test(result)\n        ? ''\n        : result;\n    }\n\n    /**\n     * Checks if an object is of the specified class.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @param {string} name The name of the class.\n     * @returns {boolean} Returns `true` if the value is of the specified class, else `false`.\n     */\n    function isClassOf(value, name) {\n      return value != null && toString.call(value) == '[object ' + name + ']';\n    }\n\n    /**\n     * Host objects can return type values that are different from their actual\n     * data type. The objects we are concerned with usually return non-primitive\n     * types of \"object\", \"function\", or \"unknown\".\n     *\n     * @private\n     * @param {*} object The owner of the property.\n     * @param {string} property The property to check.\n     * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n     */\n    function isHostType(object, property) {\n      if (object == null) {\n        return false;\n      }\n      var type = typeof object[property];\n      return !rePrimitive.test(type) && (type != 'object' || !!object[property]);\n    }\n\n    /**\n     * Checks if a value can be safely coerced to a string.\n     *\n     * @private\n     * @param {*} value The value to check.\n     * @returns {boolean} Returns `true` if the value can be coerced, else `false`.\n     */\n    function isStringable(value) {\n      return _.isString(value) || (_.has(value, 'toString') && _.isFunction(value.toString));\n    }\n\n    /**\n     * A wrapper around `require` to suppress `module missing` errors.\n     *\n     * @private\n     * @param {string} id The module id.\n     * @returns {*} The exported module or `null`.\n     */\n    function require(id) {\n      try {\n        var result = freeExports && freeRequire(id);\n      } catch(e) {}\n      return result || null;\n    }\n\n    /**\n     * Runs a snippet of JavaScript via script injection.\n     *\n     * @private\n     * @param {string} code The code to run.\n     */\n    function runScript(code) {\n      var anchor = freeDefine ? define.amd : Benchmark,\n          script = doc.createElement('script'),\n          sibling = doc.getElementsByTagName('script')[0],\n          parent = sibling.parentNode,\n          prop = uid + 'runScript',\n          prefix = '(' + (freeDefine ? 'define.amd.' : 'Benchmark.') + prop + '||function(){})();';\n\n      // Firefox 2.0.0.2 cannot use script injection as intended because it executes\n      // asynchronously, but that's OK because script injection is only used to avoid\n      // the previously commented JaegerMonkey bug.\n      try {\n        // Remove the inserted script *before* running the code to avoid differences\n        // in the expected script element count/order of the document.\n        script.appendChild(doc.createTextNode(prefix + code));\n        anchor[prop] = function() { destroyElement(script); };\n      } catch(e) {\n        parent = parent.cloneNode(false);\n        sibling = null;\n        script.text = code;\n      }\n      parent.insertBefore(script, sibling);\n      delete anchor[prop];\n    }\n\n    /**\n     * A helper function for setting options/event handlers.\n     *\n     * @private\n     * @param {Object} object The benchmark or suite instance.\n     * @param {Object} [options={}] Options object.\n     */\n    function setOptions(object, options) {\n      options = object.options = _.assign({}, cloneDeep(object.constructor.options), cloneDeep(options));\n\n      _.forOwn(options, function(value, key) {\n        if (value != null) {\n          // Add event listeners.\n          if (/^on[A-Z]/.test(key)) {\n            _.each(key.split(' '), function(key) {\n              object.on(key.slice(2).toLowerCase(), value);\n            });\n          } else if (!_.has(object, key)) {\n            object[key] = cloneDeep(value);\n          }\n        }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Handles cycling/completing the deferred benchmark.\n     *\n     * @memberOf Benchmark.Deferred\n     */\n    function resolve() {\n      var deferred = this,\n          clone = deferred.benchmark,\n          bench = clone._original;\n\n      if (bench.aborted) {\n        // cycle() -> clone cycle/complete event -> compute()'s invoked bench.run() cycle/complete.\n        deferred.teardown();\n        clone.running = false;\n        cycle(deferred);\n      }\n      else if (++deferred.cycles < clone.count) {\n        clone.compiled.call(deferred, context, timer);\n      }\n      else {\n        timer.stop(deferred);\n        deferred.teardown();\n        delay(clone, function() { cycle(deferred); });\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * A generic `Array#filter` like method.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} array The array to iterate over.\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Array} A new array of values that passed callback filter.\n     * @example\n     *\n     * // get odd numbers\n     * Benchmark.filter([1, 2, 3, 4, 5], function(n) {\n     *   return n % 2;\n     * }); // -> [1, 3, 5];\n     *\n     * // get fastest benchmarks\n     * Benchmark.filter(benches, 'fastest');\n     *\n     * // get slowest benchmarks\n     * Benchmark.filter(benches, 'slowest');\n     *\n     * // get benchmarks that completed without erroring\n     * Benchmark.filter(benches, 'successful');\n     */\n    function filter(array, callback) {\n      if (callback === 'successful') {\n        // Callback to exclude those that are errored, unrun, or have hz of Infinity.\n        callback = function(bench) {\n          return bench.cycles && _.isFinite(bench.hz) && !bench.error;\n        };\n      }\n      else if (callback === 'fastest' || callback === 'slowest') {\n        // Get successful, sort by period + margin of error, and filter fastest/slowest.\n        var result = filter(array, 'successful').sort(function(a, b) {\n          a = a.stats; b = b.stats;\n          return (a.mean + a.moe > b.mean + b.moe ? 1 : -1) * (callback === 'fastest' ? 1 : -1);\n        });\n\n        return _.filter(result, function(bench) {\n          return result[0].compare(bench) == 0;\n        });\n      }\n      return _.filter(array, callback);\n    }\n\n    /**\n     * Converts a number to a more readable comma-separated string representation.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {number} number The number to convert.\n     * @returns {string} The more readable string representation.\n     */\n    function formatNumber(number) {\n      number = String(number).split('.');\n      return number[0].replace(/(?=(?:\\d{3})+$)(?!\\b)/g, ',') +\n        (number[1] ? '.' + number[1] : '');\n    }\n\n    /**\n     * Invokes a method on all items in an array.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array} benches Array of benchmarks to iterate over.\n     * @param {Object|string} name The name of the method to invoke OR options object.\n     * @param {...*} [args] Arguments to invoke the method with.\n     * @returns {Array} A new array of values returned from each method invoked.\n     * @example\n     *\n     * // invoke `reset` on all benchmarks\n     * Benchmark.invoke(benches, 'reset');\n     *\n     * // invoke `emit` with arguments\n     * Benchmark.invoke(benches, 'emit', 'complete', listener);\n     *\n     * // invoke `run(true)`, treat benchmarks as a queue, and register invoke callbacks\n     * Benchmark.invoke(benches, {\n     *\n     *   // invoke the `run` method\n     *   'name': 'run',\n     *\n     *   // pass a single argument\n     *   'args': true,\n     *\n     *   // treat as queue, removing benchmarks from front of `benches` until empty\n     *   'queued': true,\n     *\n     *   // called before any benchmarks have been invoked.\n     *   'onStart': onStart,\n     *\n     *   // called between invoking benchmarks\n     *   'onCycle': onCycle,\n     *\n     *   // called after all benchmarks have been invoked.\n     *   'onComplete': onComplete\n     * });\n     */\n    function invoke(benches, name) {\n      var args,\n          bench,\n          queued,\n          index = -1,\n          eventProps = { 'currentTarget': benches },\n          options = { 'onStart': _.noop, 'onCycle': _.noop, 'onComplete': _.noop },\n          result = _.toArray(benches);\n\n      /**\n       * Invokes the method of the current object and if synchronous, fetches the next.\n       */\n      function execute() {\n        var listeners,\n            async = isAsync(bench);\n\n        if (async) {\n          // Use `getNext` as the first listener.\n          bench.on('complete', getNext);\n          listeners = bench.events.complete;\n          listeners.splice(0, 0, listeners.pop());\n        }\n        // Execute method.\n        result[index] = _.isFunction(bench && bench[name]) ? bench[name].apply(bench, args) : undefined;\n        // If synchronous return `true` until finished.\n        return !async && getNext();\n      }\n\n      /**\n       * Fetches the next bench or executes `onComplete` callback.\n       */\n      function getNext(event) {\n        var cycleEvent,\n            last = bench,\n            async = isAsync(last);\n\n        if (async) {\n          last.off('complete', getNext);\n          last.emit('complete');\n        }\n        // Emit \"cycle\" event.\n        eventProps.type = 'cycle';\n        eventProps.target = last;\n        cycleEvent = Event(eventProps);\n        options.onCycle.call(benches, cycleEvent);\n\n        // Choose next benchmark if not exiting early.\n        if (!cycleEvent.aborted && raiseIndex() !== false) {\n          bench = queued ? benches[0] : result[index];\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          }\n          else if (async) {\n            // Resume execution if previously asynchronous but now synchronous.\n            while (execute()) {}\n          }\n          else {\n            // Continue synchronous execution.\n            return true;\n          }\n        } else {\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // When used as a listener `event.aborted = true` will cancel the rest of\n        // the \"complete\" listeners because they were already called above and when\n        // used as part of `getNext` the `return false` will exit the execution while-loop.\n        if (event) {\n          event.aborted = true;\n        } else {\n          return false;\n        }\n      }\n\n      /**\n       * Checks if invoking `Benchmark#run` with asynchronous cycles.\n       */\n      function isAsync(object) {\n        // Avoid using `instanceof` here because of IE memory leak issues with host objects.\n        var async = args[0] && args[0].async;\n        return name == 'run' && (object instanceof Benchmark) &&\n          ((async == null ? object.options.async : async) && support.timeout || object.defer);\n      }\n\n      /**\n       * Raises `index` to the next defined index or returns `false`.\n       */\n      function raiseIndex() {\n        index++;\n\n        // If queued remove the previous bench.\n        if (queued && index > 0) {\n          shift.call(benches);\n        }\n        // If we reached the last index then return `false`.\n        return (queued ? benches.length : index < result.length)\n          ? index\n          : (index = false);\n      }\n      // Juggle arguments.\n      if (_.isString(name)) {\n        // 2 arguments (array, name).\n        args = slice.call(arguments, 2);\n      } else {\n        // 2 arguments (array, options).\n        options = _.assign(options, name);\n        name = options.name;\n        args = _.isArray(args = 'args' in options ? options.args : []) ? args : [args];\n        queued = options.queued;\n      }\n      // Start iterating over the array.\n      if (raiseIndex() !== false) {\n        // Emit \"start\" event.\n        bench = result[index];\n        eventProps.type = 'start';\n        eventProps.target = bench;\n        options.onStart.call(benches, Event(eventProps));\n\n        // End early if the suite was aborted in an \"onStart\" listener.\n        if (name == 'run' && (benches instanceof Suite) && benches.aborted) {\n          // Emit \"cycle\" event.\n          eventProps.type = 'cycle';\n          options.onCycle.call(benches, Event(eventProps));\n          // Emit \"complete\" event.\n          eventProps.type = 'complete';\n          options.onComplete.call(benches, Event(eventProps));\n        }\n        // Start method execution.\n        else {\n          if (isAsync(bench)) {\n            delay(bench, execute);\n          } else {\n            while (execute()) {}\n          }\n        }\n      }\n      return result;\n    }\n\n    /**\n     * Creates a string of joined array values or object key-value pairs.\n     *\n     * @static\n     * @memberOf Benchmark\n     * @param {Array|Object} object The object to operate on.\n     * @param {string} [separator1=','] The separator used between key-value pairs.\n     * @param {string} [separator2=': '] The separator used between keys and values.\n     * @returns {string} The joined result.\n     */\n    function join(object, separator1, separator2) {\n      var result = [],\n          length = (object = Object(object)).length,\n          arrayLike = length === length >>> 0;\n\n      separator2 || (separator2 = ': ');\n      _.each(object, function(value, key) {\n        result.push(arrayLike ? value : key + separator2 + value);\n      });\n      return result.join(separator1 || ',');\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts all benchmarks in the suite.\n     *\n     * @name abort\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function abortSuite() {\n      var event,\n          suite = this,\n          resetting = calledBy.resetSuite;\n\n      if (suite.running) {\n        event = Event('abort');\n        suite.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abortSuite = true;\n          suite.reset();\n          delete calledBy.abortSuite;\n\n          if (!resetting) {\n            suite.aborted = true;\n            invoke(suite, 'abort');\n          }\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Adds a test to the benchmark suite.\n     *\n     * @memberOf Benchmark.Suite\n     * @param {string} name A name to identify the benchmark.\n     * @param {Function|string} fn The test to benchmark.\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.add(fn);\n     *\n     * // or using a name first\n     * suite.add('foo', fn);\n     *\n     * // or with options\n     * suite.add('foo', fn, {\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or name and options\n     * suite.add('foo', {\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     *\n     * // or options only\n     * suite.add({\n     *   'name': 'foo',\n     *   'fn': fn,\n     *   'onCycle': onCycle,\n     *   'onComplete': onComplete\n     * });\n     */\n    function add(name, fn, options) {\n      var suite = this,\n          bench = new Benchmark(name, fn, options),\n          event = Event({ 'type': 'add', 'target': bench });\n\n      if (suite.emit(event), !event.cancelled) {\n        suite.push(bench);\n      }\n      return suite;\n    }\n\n    /**\n     * Creates a new suite with cloned benchmarks.\n     *\n     * @name clone\n     * @memberOf Benchmark.Suite\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new suite instance.\n     */\n    function cloneSuite(options) {\n      var suite = this,\n          result = new suite.constructor(_.assign({}, suite.options, options));\n\n      // Copy own properties.\n      _.forOwn(suite, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = value && _.isFunction(value.clone)\n            ? value.clone()\n            : cloneDeep(value);\n        }\n      });\n      return result;\n    }\n\n    /**\n     * An `Array#filter` like method.\n     *\n     * @name filter\n     * @memberOf Benchmark.Suite\n     * @param {Function|string} callback The function/alias called per iteration.\n     * @returns {Object} A new suite of benchmarks that passed callback filter.\n     */\n    function filterSuite(callback) {\n      var suite = this,\n          result = new suite.constructor(suite.options);\n\n      result.push.apply(result, filter(suite, callback));\n      return result;\n    }\n\n    /**\n     * Resets all benchmarks in the suite.\n     *\n     * @name reset\n     * @memberOf Benchmark.Suite\n     * @returns {Object} The suite instance.\n     */\n    function resetSuite() {\n      var event,\n          suite = this,\n          aborting = calledBy.abortSuite;\n\n      if (suite.running && !aborting) {\n        // No worries, `resetSuite()` is called within `abortSuite()`.\n        calledBy.resetSuite = true;\n        suite.abort();\n        delete calledBy.resetSuite;\n      }\n      // Reset if the state has changed.\n      else if ((suite.aborted || suite.running) &&\n          (suite.emit(event = Event('reset')), !event.cancelled)) {\n        suite.aborted = suite.running = false;\n        if (!aborting) {\n          invoke(suite, 'reset');\n        }\n      }\n      return suite;\n    }\n\n    /**\n     * Runs the suite.\n     *\n     * @name run\n     * @memberOf Benchmark.Suite\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The suite instance.\n     * @example\n     *\n     * // basic usage\n     * suite.run();\n     *\n     * // or with options\n     * suite.run({ 'async': true, 'queued': true });\n     */\n    function runSuite(options) {\n      var suite = this;\n\n      suite.reset();\n      suite.running = true;\n      options || (options = {});\n\n      invoke(suite, {\n        'name': 'run',\n        'args': options,\n        'queued': options.queued,\n        'onStart': function(event) {\n          suite.emit(event);\n        },\n        'onCycle': function(event) {\n          var bench = event.target;\n          if (bench.error) {\n            suite.emit({ 'type': 'error', 'target': bench });\n          }\n          suite.emit(event);\n          event.aborted = suite.aborted;\n        },\n        'onComplete': function(event) {\n          suite.running = false;\n          suite.emit(event);\n        }\n      });\n      return suite;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Executes all registered listeners of the specified event type.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {Object|string} type The event type or object.\n     * @param {...*} [args] Arguments to invoke the listener with.\n     * @returns {*} Returns the return value of the last listener executed.\n     */\n    function emit(type) {\n      var listeners,\n          object = this,\n          event = Event(type),\n          events = object.events,\n          args = (arguments[0] = event, arguments);\n\n      event.currentTarget || (event.currentTarget = object);\n      event.target || (event.target = object);\n      delete event.result;\n\n      if (events && (listeners = _.has(events, event.type) && events[event.type])) {\n        _.each(listeners.slice(), function(listener) {\n          if ((event.result = listener.apply(object, args)) === false) {\n            event.cancelled = true;\n          }\n          return !event.aborted;\n        });\n      }\n      return event.result;\n    }\n\n    /**\n     * Returns an array of event listeners for a given type that can be manipulated\n     * to add or remove listeners.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @returns {Array} The listeners array.\n     */\n    function listeners(type) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      return _.has(events, type) ? events[type] : (events[type] = []);\n    }\n\n    /**\n     * Unregisters a listener for the specified event type(s),\n     * or unregisters all listeners for the specified event type(s),\n     * or unregisters all listeners for all event types.\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} [type] The event type.\n     * @param {Function} [listener] The function to unregister.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // unregister a listener for an event type\n     * bench.off('cycle', listener);\n     *\n     * // unregister a listener for multiple event types\n     * bench.off('start cycle', listener);\n     *\n     * // unregister all listeners for an event type\n     * bench.off('cycle');\n     *\n     * // unregister all listeners for multiple event types\n     * bench.off('start cycle complete');\n     *\n     * // unregister all listeners for all event types\n     * bench.off();\n     */\n    function off(type, listener) {\n      var object = this,\n          events = object.events;\n\n      if (!events) {\n        return object;\n      }\n      _.each(type ? type.split(' ') : events, function(listeners, type) {\n        var index;\n        if (typeof listeners == 'string') {\n          type = listeners;\n          listeners = _.has(events, type) && events[type];\n        }\n        if (listeners) {\n          if (listener) {\n            index = _.indexOf(listeners, listener);\n            if (index > -1) {\n              listeners.splice(index, 1);\n            }\n          } else {\n            listeners.length = 0;\n          }\n        }\n      });\n      return object;\n    }\n\n    /**\n     * Registers a listener for the specified event type(s).\n     *\n     * @memberOf Benchmark, Benchmark.Suite\n     * @param {string} type The event type.\n     * @param {Function} listener The function to register.\n     * @returns {Object} The current instance.\n     * @example\n     *\n     * // register a listener for an event type\n     * bench.on('cycle', listener);\n     *\n     * // register a listener for multiple event types\n     * bench.on('start cycle', listener);\n     */\n    function on(type, listener) {\n      var object = this,\n          events = object.events || (object.events = {});\n\n      _.each(type.split(' '), function(type) {\n        (_.has(events, type)\n          ? events[type]\n          : (events[type] = [])\n        ).push(listener);\n      });\n      return object;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Aborts the benchmark without recording times.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function abort() {\n      var event,\n          bench = this,\n          resetting = calledBy.reset;\n\n      if (bench.running) {\n        event = Event('abort');\n        bench.emit(event);\n        if (!event.cancelled || resetting) {\n          // Avoid infinite recursion.\n          calledBy.abort = true;\n          bench.reset();\n          delete calledBy.abort;\n\n          if (support.timeout) {\n            clearTimeout(bench._timerId);\n            delete bench._timerId;\n          }\n          if (!resetting) {\n            bench.aborted = true;\n            bench.running = false;\n          }\n        }\n      }\n      return bench;\n    }\n\n    /**\n     * Creates a new benchmark using the same test and options.\n     *\n     * @memberOf Benchmark\n     * @param {Object} options Options object to overwrite cloned options.\n     * @returns {Object} The new benchmark instance.\n     * @example\n     *\n     * var bizarro = bench.clone({\n     *   'name': 'doppelganger'\n     * });\n     */\n    function clone(options) {\n      var bench = this,\n          result = new bench.constructor(_.assign({}, bench, options));\n\n      // Correct the `options` object.\n      result.options = _.assign({}, cloneDeep(bench.options), cloneDeep(options));\n\n      // Copy own custom properties.\n      _.forOwn(bench, function(value, key) {\n        if (!_.has(result, key)) {\n          result[key] = cloneDeep(value);\n        }\n      });\n\n      return result;\n    }\n\n    /**\n     * Determines if a benchmark is faster than another.\n     *\n     * @memberOf Benchmark\n     * @param {Object} other The benchmark to compare.\n     * @returns {number} Returns `-1` if slower, `1` if faster, and `0` if indeterminate.\n     */\n    function compare(other) {\n      var bench = this;\n\n      // Exit early if comparing the same benchmark.\n      if (bench == other) {\n        return 0;\n      }\n      var critical,\n          zStat,\n          sample1 = bench.stats.sample,\n          sample2 = other.stats.sample,\n          size1 = sample1.length,\n          size2 = sample2.length,\n          maxSize = max(size1, size2),\n          minSize = min(size1, size2),\n          u1 = getU(sample1, sample2),\n          u2 = getU(sample2, sample1),\n          u = min(u1, u2);\n\n      function getScore(xA, sampleB) {\n        return _.reduce(sampleB, function(total, xB) {\n          return total + (xB > xA ? 0 : xB < xA ? 1 : 0.5);\n        }, 0);\n      }\n\n      function getU(sampleA, sampleB) {\n        return _.reduce(sampleA, function(total, xA) {\n          return total + getScore(xA, sampleB);\n        }, 0);\n      }\n\n      function getZ(u) {\n        return (u - ((size1 * size2) / 2)) / sqrt((size1 * size2 * (size1 + size2 + 1)) / 12);\n      }\n      // Reject the null hypothesis the two samples come from the\n      // same population (i.e. have the same median) if...\n      if (size1 + size2 > 30) {\n        // ...the z-stat is greater than 1.96 or less than -1.96\n        // http://www.statisticslectures.com/topics/mannwhitneyu/\n        zStat = getZ(u);\n        return abs(zStat) > 1.96 ? (u == u1 ? 1 : -1) : 0;\n      }\n      // ...the U value is less than or equal the critical U value.\n      critical = maxSize < 5 || minSize < 3 ? 0 : uTable[maxSize][minSize - 3];\n      return u <= critical ? (u == u1 ? 1 : -1) : 0;\n    }\n\n    /**\n     * Reset properties and abort if running.\n     *\n     * @memberOf Benchmark\n     * @returns {Object} The benchmark instance.\n     */\n    function reset() {\n      var bench = this;\n      if (bench.running && !calledBy.abort) {\n        // No worries, `reset()` is called within `abort()`.\n        calledBy.reset = true;\n        bench.abort();\n        delete calledBy.reset;\n        return bench;\n      }\n      var event,\n          index = 0,\n          changes = [],\n          queue = [];\n\n      // A non-recursive solution to check if properties have changed.\n      // For more information see http://www.jslab.dk/articles/non.recursive.preorder.traversal.part4.\n      var data = {\n        'destination': bench,\n        'source': _.assign({}, cloneDeep(bench.constructor.prototype), cloneDeep(bench.options))\n      };\n\n      do {\n        _.forOwn(data.source, function(value, key) {\n          var changed,\n              destination = data.destination,\n              currValue = destination[key];\n\n          // Skip pseudo private properties like `_timerId` which could be a\n          // Java object in environments like RingoJS.\n          if (key.charAt(0) == '_') {\n            return;\n          }\n          if (value && typeof value == 'object') {\n            if (_.isArray(value)) {\n              // Check if an array value has changed to a non-array value.\n              if (!_.isArray(currValue)) {\n                changed = currValue = [];\n              }\n              // Check if an array has changed its length.\n              if (currValue.length != value.length) {\n                changed = currValue = currValue.slice(0, value.length);\n                currValue.length = value.length;\n              }\n            }\n            // Check if an object has changed to a non-object value.\n            else if (!currValue || typeof currValue != 'object') {\n              changed = currValue = {};\n            }\n            // Register a changed object.\n            if (changed) {\n              changes.push({ 'destination': destination, 'key': key, 'value': currValue });\n            }\n            queue.push({ 'destination': currValue, 'source': value });\n          }\n          // Register a changed primitive.\n          else if (value !== currValue && !(value == null || _.isFunction(value))) {\n            changes.push({ 'destination': destination, 'key': key, 'value': value });\n          }\n        });\n      }\n      while ((data = queue[index++]));\n\n      // If changed emit the `reset` event and if it isn't cancelled reset the benchmark.\n      if (changes.length && (bench.emit(event = Event('reset')), !event.cancelled)) {\n        _.each(changes, function(data) {\n          data.destination[data.key] = data.value;\n        });\n      }\n      return bench;\n    }\n\n    /**\n     * Displays relevant benchmark information when coerced to a string.\n     *\n     * @name toString\n     * @memberOf Benchmark\n     * @returns {string} A string representation of the benchmark instance.\n     */\n    function toStringBench() {\n      var bench = this,\n          error = bench.error,\n          hz = bench.hz,\n          id = bench.id,\n          stats = bench.stats,\n          size = stats.sample.length,\n          pm = '\\xb1',\n          result = bench.name || (_.isNaN(id) ? id : '<Test #' + id + '>');\n\n      if (error) {\n        result += ': ' + join(error);\n      } else {\n        result += ' x ' + formatNumber(hz.toFixed(hz < 100 ? 2 : 0)) + ' ops/sec ' + pm +\n          stats.rme.toFixed(2) + '% (' + size + ' run' + (size == 1 ? '' : 's') + ' sampled)';\n      }\n      return result;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Clocks the time taken to execute a test per cycle (secs).\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @returns {number} The time taken.\n     */\n    function clock() {\n      var options = Benchmark.options,\n          templateData = {},\n          timers = [{ 'ns': timer.ns, 'res': max(0.0015, getRes('ms')), 'unit': 'ms' }];\n\n      // Lazy define for hi-res timers.\n      clock = function(clone) {\n        var deferred;\n\n        if (clone instanceof Deferred) {\n          deferred = clone;\n          clone = deferred.benchmark;\n        }\n        var bench = clone._original,\n            stringable = isStringable(bench.fn),\n            count = bench.count = clone.count,\n            decompilable = stringable || (support.decompilation && (clone.setup !== _.noop || clone.teardown !== _.noop)),\n            id = bench.id,\n            name = bench.name || (typeof id == 'number' ? '<Test #' + id + '>' : id),\n            result = 0;\n\n        // Init `minTime` if needed.\n        clone.minTime = bench.minTime || (bench.minTime = bench.options.minTime = options.minTime);\n\n        // Compile in setup/teardown functions and the test loop.\n        // Create a new compiled test, instead of using the cached `bench.compiled`,\n        // to avoid potential engine optimizations enabled over the life of the test.\n        var funcBody = deferred\n          ? 'var d#=this,${fnArg}=d#,m#=d#.benchmark._original,f#=m#.fn,su#=m#.setup,td#=m#.teardown;' +\n            // When `deferred.cycles` is `0` then...\n            'if(!d#.cycles){' +\n            // set `deferred.fn`,\n            'd#.fn=function(){var ${fnArg}=d#;if(typeof f#==\"function\"){try{${fn}\\n}catch(e#){f#(d#)}}else{${fn}\\n}};' +\n            // set `deferred.teardown`,\n            'd#.teardown=function(){d#.cycles=0;if(typeof td#==\"function\"){try{${teardown}\\n}catch(e#){td#()}}else{${teardown}\\n}};' +\n            // execute the benchmark's `setup`,\n            'if(typeof su#==\"function\"){try{${setup}\\n}catch(e#){su#()}}else{${setup}\\n};' +\n            // start timer,\n            't#.start(d#);' +\n            // and then execute `deferred.fn` and return a dummy object.\n            '}d#.fn();return{uid:\"${uid}\"}'\n\n          : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count,n#=t#.ns;${setup}\\n${begin};' +\n            'while(i#--){${fn}\\n}${end};${teardown}\\nreturn{elapsed:r#,uid:\"${uid}\"}';\n\n        var compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody),\n            isEmpty = !(templateData.fn || stringable);\n\n        try {\n          if (isEmpty) {\n            // Firefox may remove dead code from `Function#toString` results.\n            // For more information see http://bugzil.la/536085.\n            throw new Error('The test \"' + name + '\" is empty. This may be the result of dead code removal.');\n          }\n          else if (!deferred) {\n            // Pretest to determine if compiled code exits early, usually by a\n            // rogue `return` statement, by checking for a return object with the uid.\n            bench.count = 1;\n            compiled = decompilable && (compiled.call(bench, context, timer) || {}).uid == templateData.uid && compiled;\n            bench.count = count;\n          }\n        } catch(e) {\n          compiled = null;\n          clone.error = e || new Error(String(e));\n          bench.count = count;\n        }\n        // Fallback when a test exits early or errors during pretest.\n        if (!compiled && !deferred && !isEmpty) {\n          funcBody = (\n            stringable || (decompilable && !clone.error)\n              ? 'function f#(){${fn}\\n}var r#,s#,m#=this,i#=m#.count'\n              : 'var r#,s#,m#=this,f#=m#.fn,i#=m#.count'\n            ) +\n            ',n#=t#.ns;${setup}\\n${begin};m#.f#=f#;while(i#--){m#.f#()}${end};' +\n            'delete m#.f#;${teardown}\\nreturn{elapsed:r#}';\n\n          compiled = createCompiled(bench, decompilable, deferred, funcBody);\n\n          try {\n            // Pretest one more time to check for errors.\n            bench.count = 1;\n            compiled.call(bench, context, timer);\n            bench.count = count;\n            delete clone.error;\n          }\n          catch(e) {\n            bench.count = count;\n            if (!clone.error) {\n              clone.error = e || new Error(String(e));\n            }\n          }\n        }\n        // If no errors run the full test loop.\n        if (!clone.error) {\n          compiled = bench.compiled = clone.compiled = createCompiled(bench, decompilable, deferred, funcBody);\n          result = compiled.call(deferred || bench, context, timer).elapsed;\n        }\n        return result;\n      };\n\n      /*----------------------------------------------------------------------*/\n\n      /**\n       * Creates a compiled function from the given function `body`.\n       */\n      function createCompiled(bench, decompilable, deferred, body) {\n        var fn = bench.fn,\n            fnArg = deferred ? getFirstArgument(fn) || 'deferred' : '';\n\n        templateData.uid = uid + uidCounter++;\n\n        _.assign(templateData, {\n          'setup': decompilable ? getSource(bench.setup) : interpolate('m#.setup()'),\n          'fn': decompilable ? getSource(fn) : interpolate('m#.fn(' + fnArg + ')'),\n          'fnArg': fnArg,\n          'teardown': decompilable ? getSource(bench.teardown) : interpolate('m#.teardown()')\n        });\n\n        // Use API of chosen timer.\n        if (timer.unit == 'ns') {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#()'),\n            'end': interpolate('r#=n#(s#);r#=r#[0]+(r#[1]/1e9)')\n          });\n        }\n        else if (timer.unit == 'us') {\n          if (timer.ns.stop) {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#.start()'),\n              'end': interpolate('r#=n#.microseconds()/1e6')\n            });\n          } else {\n            _.assign(templateData, {\n              'begin': interpolate('s#=n#()'),\n              'end': interpolate('r#=(n#()-s#)/1e6')\n            });\n          }\n        }\n        else if (timer.ns.now) {\n          _.assign(templateData, {\n            'begin': interpolate('s#=n#.now()'),\n            'end': interpolate('r#=(n#.now()-s#)/1e3')\n          });\n        }\n        else {\n          _.assign(templateData, {\n            'begin': interpolate('s#=new n#().getTime()'),\n            'end': interpolate('r#=(new n#().getTime()-s#)/1e3')\n          });\n        }\n        // Define `timer` methods.\n        timer.start = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,${begin};o#.elapsed=0;o#.timeStamp=s#')\n        );\n\n        timer.stop = createFunction(\n          interpolate('o#'),\n          interpolate('var n#=this.ns,s#=o#.timeStamp,${end};o#.elapsed=r#')\n        );\n\n        // Create compiled test.\n        return createFunction(\n          interpolate('window,t#'),\n          'var global = window, clearTimeout = global.clearTimeout, setTimeout = global.setTimeout;\\n' +\n          interpolate(body)\n        );\n      }\n\n      /**\n       * Gets the current timer's minimum resolution (secs).\n       */\n      function getRes(unit) {\n        var measured,\n            begin,\n            count = 30,\n            divisor = 1e3,\n            ns = timer.ns,\n            sample = [];\n\n        // Get average smallest measurable time.\n        while (count--) {\n          if (unit == 'us') {\n            divisor = 1e6;\n            if (ns.stop) {\n              ns.start();\n              while (!(measured = ns.microseconds())) {}\n            } else {\n              begin = ns();\n              while (!(measured = ns() - begin)) {}\n            }\n          }\n          else if (unit == 'ns') {\n            divisor = 1e9;\n            begin = (begin = ns())[0] + (begin[1] / divisor);\n            while (!(measured = ((measured = ns())[0] + (measured[1] / divisor)) - begin)) {}\n            divisor = 1;\n          }\n          else if (ns.now) {\n            begin = ns.now();\n            while (!(measured = ns.now() - begin)) {}\n          }\n          else {\n            begin = new ns().getTime();\n            while (!(measured = new ns().getTime() - begin)) {}\n          }\n          // Check for broken timers.\n          if (measured > 0) {\n            sample.push(measured);\n          } else {\n            sample.push(Infinity);\n            break;\n          }\n        }\n        // Convert to seconds.\n        return getMean(sample) / divisor;\n      }\n\n      /**\n       * Interpolates a given template string.\n       */\n      function interpolate(string) {\n        // Replaces all occurrences of `#` with a unique number and template tokens with content.\n        return _.template(string.replace(/\\#/g, /\\d+/.exec(templateData.uid)))(templateData);\n      }\n\n      /*----------------------------------------------------------------------*/\n\n      // Detect Chrome's microsecond timer:\n      // enable benchmarking via the --enable-benchmarking command\n      // line switch in at least Chrome 7 to use chrome.Interval\n      try {\n        if ((timer.ns = new (context.chrome || context.chromium).Interval)) {\n          timers.push({ 'ns': timer.ns, 'res': getRes('us'), 'unit': 'us' });\n        }\n      } catch(e) {}\n\n      // Detect Node.js's nanosecond resolution timer available in Node.js >= 0.8.\n      if (processObject && typeof (timer.ns = processObject.hrtime) == 'function') {\n        timers.push({ 'ns': timer.ns, 'res': getRes('ns'), 'unit': 'ns' });\n      }\n      // Detect Wade Simmons' Node.js `microtime` module.\n      if (microtimeObject && typeof (timer.ns = microtimeObject.now) == 'function') {\n        timers.push({ 'ns': timer.ns,  'res': getRes('us'), 'unit': 'us' });\n      }\n      // Pick timer with highest resolution.\n      timer = _.minBy(timers, 'res');\n\n      // Error if there are no working timers.\n      if (timer.res == Infinity) {\n        throw new Error('Benchmark.js was unable to find a working timer.');\n      }\n      // Resolve time span required to achieve a percent uncertainty of at most 1%.\n      // For more information see http://spiff.rit.edu/classes/phys273/uncert/uncert.html.\n      options.minTime || (options.minTime = max(timer.res / 2 / 0.01, 0.05));\n      return clock.apply(null, arguments);\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Computes stats on benchmark results.\n     *\n     * @private\n     * @param {Object} bench The benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function compute(bench, options) {\n      options || (options = {});\n\n      var async = options.async,\n          elapsed = 0,\n          initCount = bench.initCount,\n          minSamples = bench.minSamples,\n          queue = [],\n          sample = bench.stats.sample;\n\n      /**\n       * Adds a clone to the queue.\n       */\n      function enqueue() {\n        queue.push(bench.clone({\n          '_original': bench,\n          'events': {\n            'abort': [update],\n            'cycle': [update],\n            'error': [update],\n            'start': [update]\n          }\n        }));\n      }\n\n      /**\n       * Updates the clone/original benchmarks to keep their data in sync.\n       */\n      function update(event) {\n        var clone = this,\n            type = event.type;\n\n        if (bench.running) {\n          if (type == 'start') {\n            // Note: `clone.minTime` prop is inited in `clock()`.\n            clone.count = bench.initCount;\n          }\n          else {\n            if (type == 'error') {\n              bench.error = clone.error;\n            }\n            if (type == 'abort') {\n              bench.abort();\n              bench.emit('cycle');\n            } else {\n              event.currentTarget = event.target = bench;\n              bench.emit(event);\n            }\n          }\n        } else if (bench.aborted) {\n          // Clear abort listeners to avoid triggering bench's abort/cycle again.\n          clone.events.abort.length = 0;\n          clone.abort();\n        }\n      }\n\n      /**\n       * Determines if more clones should be queued or if cycling should stop.\n       */\n      function evaluate(event) {\n        var critical,\n            df,\n            mean,\n            moe,\n            rme,\n            sd,\n            sem,\n            variance,\n            clone = event.target,\n            done = bench.aborted,\n            now = _.now(),\n            size = sample.push(clone.times.period),\n            maxedOut = size >= minSamples && (elapsed += now - clone.times.timeStamp) / 1e3 > bench.maxTime,\n            times = bench.times,\n            varOf = function(sum, x) { return sum + pow(x - mean, 2); };\n\n        // Exit early for aborted or unclockable tests.\n        if (done || clone.hz == Infinity) {\n          maxedOut = !(size = sample.length = queue.length = 0);\n        }\n\n        if (!done) {\n          // Compute the sample mean (estimate of the population mean).\n          mean = getMean(sample);\n          // Compute the sample variance (estimate of the population variance).\n          variance = _.reduce(sample, varOf, 0) / (size - 1) || 0;\n          // Compute the sample standard deviation (estimate of the population standard deviation).\n          sd = sqrt(variance);\n          // Compute the standard error of the mean (a.k.a. the standard deviation of the sampling distribution of the sample mean).\n          sem = sd / sqrt(size);\n          // Compute the degrees of freedom.\n          df = size - 1;\n          // Compute the critical value.\n          critical = tTable[Math.round(df) || 1] || tTable.infinity;\n          // Compute the margin of error.\n          moe = sem * critical;\n          // Compute the relative margin of error.\n          rme = (moe / mean) * 100 || 0;\n\n          _.assign(bench.stats, {\n            'deviation': sd,\n            'mean': mean,\n            'moe': moe,\n            'rme': rme,\n            'sem': sem,\n            'variance': variance\n          });\n\n          // Abort the cycle loop when the minimum sample size has been collected\n          // and the elapsed time exceeds the maximum time allowed per benchmark.\n          // We don't count cycle delays toward the max time because delays may be\n          // increased by browsers that clamp timeouts for inactive tabs. For more\n          // information see https://developer.mozilla.org/en/window.setTimeout#Inactive_tabs.\n          if (maxedOut) {\n            // Reset the `initCount` in case the benchmark is rerun.\n            bench.initCount = initCount;\n            bench.running = false;\n            done = true;\n            times.elapsed = (now - times.timeStamp) / 1e3;\n          }\n          if (bench.hz != Infinity) {\n            bench.hz = 1 / mean;\n            times.cycle = mean * bench.count;\n            times.period = mean;\n          }\n        }\n        // If time permits, increase sample size to reduce the margin of error.\n        if (queue.length < 2 && !maxedOut) {\n          enqueue();\n        }\n        // Abort the `invoke` cycle when done.\n        event.aborted = done;\n      }\n\n      // Init queue and begin.\n      enqueue();\n      invoke(queue, {\n        'name': 'run',\n        'args': { 'async': async },\n        'queued': true,\n        'onCycle': evaluate,\n        'onComplete': function() { bench.emit('complete'); }\n      });\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Cycles a benchmark until a run `count` can be established.\n     *\n     * @private\n     * @param {Object} clone The cloned benchmark instance.\n     * @param {Object} options The options object.\n     */\n    function cycle(clone, options) {\n      options || (options = {});\n\n      var deferred;\n      if (clone instanceof Deferred) {\n        deferred = clone;\n        clone = clone.benchmark;\n      }\n      var clocked,\n          cycles,\n          divisor,\n          event,\n          minTime,\n          period,\n          async = options.async,\n          bench = clone._original,\n          count = clone.count,\n          times = clone.times;\n\n      // Continue, if not aborted between cycles.\n      if (clone.running) {\n        // `minTime` is set to `Benchmark.options.minTime` in `clock()`.\n        cycles = ++clone.cycles;\n        clocked = deferred ? deferred.elapsed : clock(clone);\n        minTime = clone.minTime;\n\n        if (cycles > bench.cycles) {\n          bench.cycles = cycles;\n        }\n        if (clone.error) {\n          event = Event('error');\n          event.message = clone.error;\n          clone.emit(event);\n          if (!event.cancelled) {\n            clone.abort();\n          }\n        }\n      }\n      // Continue, if not errored.\n      if (clone.running) {\n        // Compute the time taken to complete last test cycle.\n        bench.times.cycle = times.cycle = clocked;\n        // Compute the seconds per operation.\n        period = bench.times.period = times.period = clocked / count;\n        // Compute the ops per second.\n        bench.hz = clone.hz = 1 / period;\n        // Avoid working our way up to this next time.\n        bench.initCount = clone.initCount = count;\n        // Do we need to do another cycle?\n        clone.running = clocked < minTime;\n\n        if (clone.running) {\n          // Tests may clock at `0` when `initCount` is a small number,\n          // to avoid that we set its count to something a bit higher.\n          if (!clocked && (divisor = divisors[clone.cycles]) != null) {\n            count = floor(4e6 / divisor);\n          }\n          // Calculate how many more iterations it will take to achieve the `minTime`.\n          if (count <= clone.count) {\n            count += Math.ceil((minTime - clocked) / period);\n          }\n          clone.running = count != Infinity;\n        }\n      }\n      // Should we exit early?\n      event = Event('cycle');\n      clone.emit(event);\n      if (event.aborted) {\n        clone.abort();\n      }\n      // Figure out what to do next.\n      if (clone.running) {\n        // Start a new cycle.\n        clone.count = count;\n        if (deferred) {\n          clone.compiled.call(deferred, context, timer);\n        } else if (async) {\n          delay(clone, function() { cycle(clone, options); });\n        } else {\n          cycle(clone);\n        }\n      }\n      else {\n        // Fix TraceMonkey bug associated with clock fallbacks.\n        // For more information see http://bugzil.la/509069.\n        if (support.browser) {\n          runScript(uid + '=1;delete ' + uid);\n        }\n        // We're done.\n        clone.emit('complete');\n      }\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Runs the benchmark.\n     *\n     * @memberOf Benchmark\n     * @param {Object} [options={}] Options object.\n     * @returns {Object} The benchmark instance.\n     * @example\n     *\n     * // basic usage\n     * bench.run();\n     *\n     * // or with options\n     * bench.run({ 'async': true });\n     */\n    function run(options) {\n      var bench = this,\n          event = Event('start');\n\n      // Set `running` to `false` so `reset()` won't call `abort()`.\n      bench.running = false;\n      bench.reset();\n      bench.running = true;\n\n      bench.count = bench.initCount;\n      bench.times.timeStamp = _.now();\n      bench.emit(event);\n\n      if (!event.cancelled) {\n        options = { 'async': ((options = options && options.async) == null ? bench.async : options) && support.timeout };\n\n        // For clones created within `compute()`.\n        if (bench._original) {\n          if (bench.defer) {\n            Deferred(bench);\n          } else {\n            cycle(bench, options);\n          }\n        }\n        // For original benchmarks.\n        else {\n          compute(bench, options);\n        }\n      }\n      return bench;\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Firefox 1 erroneously defines variable and argument names of functions on\n    // the function itself as non-configurable properties with `undefined` values.\n    // The bugginess continues as the `Benchmark` constructor has an argument\n    // named `options` and Firefox 1 will not assign a value to `Benchmark.options`,\n    // making it non-writable in the process, unless it is the first property\n    // assigned by for-in loop of `_.assign()`.\n    _.assign(Benchmark, {\n\n      /**\n       * The default options copied by benchmark instances.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'options': {\n\n        /**\n         * A flag to indicate that benchmark cycles will execute asynchronously\n         * by default.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'async': false,\n\n        /**\n         * A flag to indicate that the benchmark clock is deferred.\n         *\n         * @memberOf Benchmark.options\n         * @type boolean\n         */\n        'defer': false,\n\n        /**\n         * The delay between test cycles (secs).\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'delay': 0.005,\n\n        /**\n         * Displayed by `Benchmark#toString` when a `name` is not available\n         * (auto-generated if absent).\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'id': undefined,\n\n        /**\n         * The default number of times to execute a test on a benchmark's first cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'initCount': 1,\n\n        /**\n         * The maximum time a benchmark is allowed to run before finishing (secs).\n         *\n         * Note: Cycle delays aren't counted toward the maximum time.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'maxTime': 5,\n\n        /**\n         * The minimum sample size required to perform statistical analysis.\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minSamples': 5,\n\n        /**\n         * The time needed to reduce the percent uncertainty of measurement to 1% (secs).\n         *\n         * @memberOf Benchmark.options\n         * @type number\n         */\n        'minTime': 0,\n\n        /**\n         * The name of the benchmark.\n         *\n         * @memberOf Benchmark.options\n         * @type string\n         */\n        'name': undefined,\n\n        /**\n         * An event listener called when the benchmark is aborted.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onAbort': undefined,\n\n        /**\n         * An event listener called when the benchmark completes running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onComplete': undefined,\n\n        /**\n         * An event listener called after each run cycle.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onCycle': undefined,\n\n        /**\n         * An event listener called when a test errors.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onError': undefined,\n\n        /**\n         * An event listener called when the benchmark is reset.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onReset': undefined,\n\n        /**\n         * An event listener called when the benchmark starts running.\n         *\n         * @memberOf Benchmark.options\n         * @type Function\n         */\n        'onStart': undefined\n      },\n\n      /**\n       * Platform object with properties describing things like browser name,\n       * version, and operating system. See [`platform.js`](https://mths.be/platform).\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'platform': context.platform || require('platform') || ({\n        'description': context.navigator && context.navigator.userAgent || null,\n        'layout': null,\n        'product': null,\n        'name': null,\n        'manufacturer': null,\n        'os': null,\n        'prerelease': null,\n        'version': null,\n        'toString': function() {\n          return this.description || '';\n        }\n      }),\n\n      /**\n       * The semantic version number.\n       *\n       * @static\n       * @memberOf Benchmark\n       * @type string\n       */\n      'version': '2.1.1'\n    });\n\n    _.assign(Benchmark, {\n      'filter': filter,\n      'formatNumber': formatNumber,\n      'invoke': invoke,\n      'join': join,\n      'runInContext': runInContext,\n      'support': support\n    });\n\n    // Add lodash methods to Benchmark.\n    _.each(['each', 'forEach', 'forOwn', 'has', 'indexOf', 'map', 'reduce'], function(methodName) {\n      Benchmark[methodName] = _[methodName];\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Benchmark.prototype, {\n\n      /**\n       * The number of times a test was executed.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'count': 0,\n\n      /**\n       * The number of cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The number of executions per second.\n       *\n       * @memberOf Benchmark\n       * @type number\n       */\n      'hz': 0,\n\n      /**\n       * The compiled test function.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'compiled': undefined,\n\n      /**\n       * The error object if the test failed.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'error': undefined,\n\n      /**\n       * The test to benchmark.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'fn': undefined,\n\n      /**\n       * A flag to indicate if the benchmark is aborted.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the benchmark is running.\n       *\n       * @memberOf Benchmark\n       * @type boolean\n       */\n      'running': false,\n\n      /**\n       * Compiled into the test and executed immediately **before** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       * @example\n       *\n       * // basic usage\n       * var bench = Benchmark({\n       *   'setup': function() {\n       *     var c = this.count,\n       *         element = document.getElementById('container');\n       *     while (c--) {\n       *       element.appendChild(document.createElement('div'));\n       *     }\n       *   },\n       *   'fn': function() {\n       *     element.removeChild(element.lastChild);\n       *   }\n       * });\n       *\n       * // compiles to something like:\n       * var c = this.count,\n       *     element = document.getElementById('container');\n       * while (c--) {\n       *   element.appendChild(document.createElement('div'));\n       * }\n       * var start = new Date;\n       * while (count--) {\n       *   element.removeChild(element.lastChild);\n       * }\n       * var end = new Date - start;\n       *\n       * // or using strings\n       * var bench = Benchmark({\n       *   'setup': '\\\n       *     var a = 0;\\n\\\n       *     (function() {\\n\\\n       *       (function() {\\n\\\n       *         (function() {',\n       *   'fn': 'a += 1;',\n       *   'teardown': '\\\n       *          }())\\n\\\n       *        }())\\n\\\n       *      }())'\n       * });\n       *\n       * // compiles to something like:\n       * var a = 0;\n       * (function() {\n       *   (function() {\n       *     (function() {\n       *       var start = new Date;\n       *       while (count--) {\n       *         a += 1;\n       *       }\n       *       var end = new Date - start;\n       *     }())\n       *   }())\n       * }())\n       */\n      'setup': _.noop,\n\n      /**\n       * Compiled into the test and executed immediately **after** the test loop.\n       *\n       * @memberOf Benchmark\n       * @type {Function|string}\n       */\n      'teardown': _.noop,\n\n      /**\n       * An object of stats including mean, margin or error, and standard deviation.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'stats': {\n\n        /**\n         * The margin of error.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'moe': 0,\n\n        /**\n         * The relative margin of error (expressed as a percentage of the mean).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'rme': 0,\n\n        /**\n         * The standard error of the mean.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'sem': 0,\n\n        /**\n         * The sample standard deviation.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'deviation': 0,\n\n        /**\n         * The sample arithmetic mean (secs).\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'mean': 0,\n\n        /**\n         * The array of sampled periods.\n         *\n         * @memberOf Benchmark#stats\n         * @type Array\n         */\n        'sample': [],\n\n        /**\n         * The sample variance.\n         *\n         * @memberOf Benchmark#stats\n         * @type number\n         */\n        'variance': 0\n      },\n\n      /**\n       * An object of timing data including cycle, elapsed, period, start, and stop.\n       *\n       * @memberOf Benchmark\n       * @type Object\n       */\n      'times': {\n\n        /**\n         * The time taken to complete the last cycle (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'cycle': 0,\n\n        /**\n         * The time taken to complete the benchmark (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'elapsed': 0,\n\n        /**\n         * The time taken to execute the test once (secs).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'period': 0,\n\n        /**\n         * A timestamp of when the benchmark started (ms).\n         *\n         * @memberOf Benchmark#times\n         * @type number\n         */\n        'timeStamp': 0\n      }\n    });\n\n    _.assign(Benchmark.prototype, {\n      'abort': abort,\n      'clone': clone,\n      'compare': compare,\n      'emit': emit,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'reset': reset,\n      'run': run,\n      'toString': toStringBench\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Deferred.prototype, {\n\n      /**\n       * The deferred benchmark instance.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type Object\n       */\n      'benchmark': null,\n\n      /**\n       * The number of deferred cycles performed while benchmarking.\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'cycles': 0,\n\n      /**\n       * The time taken to complete the deferred benchmark (secs).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'elapsed': 0,\n\n      /**\n       * A timestamp of when the deferred benchmark started (ms).\n       *\n       * @memberOf Benchmark.Deferred\n       * @type number\n       */\n      'timeStamp': 0\n    });\n\n    _.assign(Deferred.prototype, {\n      'resolve': resolve\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Event.prototype, {\n\n      /**\n       * A flag to indicate if the emitters listener iteration is aborted.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the default action is cancelled.\n       *\n       * @memberOf Benchmark.Event\n       * @type boolean\n       */\n      'cancelled': false,\n\n      /**\n       * The object whose listeners are currently being processed.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'currentTarget': undefined,\n\n      /**\n       * The return value of the last executed listener.\n       *\n       * @memberOf Benchmark.Event\n       * @type Mixed\n       */\n      'result': undefined,\n\n      /**\n       * The object to which the event was originally emitted.\n       *\n       * @memberOf Benchmark.Event\n       * @type Object\n       */\n      'target': undefined,\n\n      /**\n       * A timestamp of when the event was created (ms).\n       *\n       * @memberOf Benchmark.Event\n       * @type number\n       */\n      'timeStamp': 0,\n\n      /**\n       * The event type.\n       *\n       * @memberOf Benchmark.Event\n       * @type string\n       */\n      'type': ''\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The default options copied by suite instances.\n     *\n     * @static\n     * @memberOf Benchmark.Suite\n     * @type Object\n     */\n    Suite.options = {\n\n      /**\n       * The name of the suite.\n       *\n       * @memberOf Benchmark.Suite.options\n       * @type string\n       */\n      'name': undefined\n    };\n\n    /*------------------------------------------------------------------------*/\n\n    _.assign(Suite.prototype, {\n\n      /**\n       * The number of benchmarks in the suite.\n       *\n       * @memberOf Benchmark.Suite\n       * @type number\n       */\n      'length': 0,\n\n      /**\n       * A flag to indicate if the suite is aborted.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'aborted': false,\n\n      /**\n       * A flag to indicate if the suite is running.\n       *\n       * @memberOf Benchmark.Suite\n       * @type boolean\n       */\n      'running': false\n    });\n\n    _.assign(Suite.prototype, {\n      'abort': abortSuite,\n      'add': add,\n      'clone': cloneSuite,\n      'emit': emit,\n      'filter': filterSuite,\n      'join': arrayRef.join,\n      'listeners': listeners,\n      'off': off,\n      'on': on,\n      'pop': arrayRef.pop,\n      'push': push,\n      'reset': resetSuite,\n      'run': runSuite,\n      'reverse': arrayRef.reverse,\n      'shift': shift,\n      'slice': slice,\n      'sort': arrayRef.sort,\n      'splice': arrayRef.splice,\n      'unshift': unshift\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Expose Deferred, Event, and Suite.\n    _.assign(Benchmark, {\n      'Deferred': Deferred,\n      'Event': Event,\n      'Suite': Suite\n    });\n\n    /*------------------------------------------------------------------------*/\n\n    // Add lodash methods as Suite methods.\n    _.each(['each', 'forEach', 'indexOf', 'map', 'reduce'], function(methodName) {\n      var func = _[methodName];\n      Suite.prototype[methodName] = function() {\n        var args = [this];\n        push.apply(args, arguments);\n        return func.apply(_, args);\n      };\n    });\n\n    // Avoid array-like object bugs with `Array#shift` and `Array#splice`\n    // in Firefox < 10 and IE < 9.\n    _.each(['pop', 'shift', 'splice'], function(methodName) {\n      var func = arrayRef[methodName];\n\n      Suite.prototype[methodName] = function() {\n        var value = this,\n            result = func.apply(value, arguments);\n\n        if (value.length === 0) {\n          delete value[0];\n        }\n        return result;\n      };\n    });\n\n    // Avoid buggy `Array#unshift` in IE < 8 which doesn't return the new\n    // length of the array.\n    Suite.prototype.unshift = function() {\n      var value = this;\n      unshift.apply(value, arguments);\n      return value.length;\n    };\n\n    return Benchmark;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export Benchmark.\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so, through path mapping, it can be aliased.\n    define(['lodash', 'platform'], function(_, platform) {\n      return runInContext({\n        '_': _,\n        'platform': platform\n      });\n    });\n  }\n  else {\n    var Benchmark = runInContext();\n\n    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n    if (freeExports && freeModule) {\n      // Export for Node.js.\n      if (moduleExports) {\n        (freeModule.exports = Benchmark).Benchmark = Benchmark;\n      }\n      // Export for CommonJS support.\n      freeExports.Benchmark = Benchmark;\n    }\n    else {\n      // Export to the global object.\n      root.Benchmark = Benchmark;\n    }\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/benchmark/benchmark.js\n// module id = 90\n// module chunks = 0","/*!\n * Platform.js v1.3.1 <http://mths.be/platform>\n * Copyright 2014-2016 Benjamin Tan <https://d10.github.io/>\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <http://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object` */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object */\n  var oldRoot = root;\n\n  /** Detect free variable `exports` */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module` */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Opera regexp */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object */\n  var thisBinding = this;\n\n  /** Used for native method references */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // platform tokens defined at\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '6.4':  '10',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // detect Windows version from platform tokens\n    if (pattern && label && /^Win/i.test(os) &&\n        (data = data[0/*Opera 9.25 fix*/, /[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // correct character case and cleanup\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object */\n    var context = root;\n\n    /** Used to flag when a custom context is provided */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // juggle arguments\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope] */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environment */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based)\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]` */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime */\n    var data;\n\n    /** The CPU architecture */\n    var arch = ua;\n\n    /** Platform description array */\n    var description = [];\n\n    /** Platform alpha/beta indicator */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important) */\n    var layout = getLayout([\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important) */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      'Midori',\n      'Nook Browser',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      'Sunrise',\n      'Swiftfox',\n      'WebPositive',\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chrome',\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important) */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nook',\n      'PlayBook',\n      'PlayStation 4',\n      'PlayStation 3',\n      'PlayStation Vita',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }\n    });\n\n    /* Detectable OSes (order is important) */\n    var os = getOS([\n      'Windows Phone ',\n      'Android',\n      'CentOS',\n      'Debian',\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // lookup the manufacturer by product or scan the UA for the manufacturer\n        return result || (\n          value[product] ||\n          value[0/*Opera 9.25 fix*/, /^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // split by forward slash and append product version if needed\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // correct character case and cleanup\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // convert layout to an array so we can add extra details\n    layout && (layout = [layout]);\n\n    // detect product names that contain their manufacturer's name\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    }\n    // clean up Google TV\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // detect simulators\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // detect iOS\n    if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // detect Kubuntu\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // detect Android browsers\n    else if (manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // detect false positives for Firefox/Safari\n    else if (!name || (data = !/\\bMinefield\\b|\\(Android;/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // escape the `/` for Firefox 1\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // clear name of false positives\n        name = null;\n      }\n      // reassign a generic name\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // detect Firefox OS\n    if ((data = /\\((Mobile|Tablet).*?Firefox\\b/i.exec(ua)) && data[1]) {\n      os = 'Firefox OS';\n      if (!product) {\n        product = data[1];\n      }\n    }\n    // detect non-Opera versions (order is important)\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\\\d.]+$))',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // detect stubborn layout engines\n    if (layout == 'iCab' && parseFloat(version) > 3) {\n      layout = ['WebKit'];\n    } else if (\n        layout != 'Trident' &&\n        (data =\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident')\n        )\n    ) {\n      layout = [data];\n    }\n    // detect NetFront on PlayStation\n    else if (/\\bPlayStation\\b(?! Vita\\b)/i.test(name) && layout == 'WebKit') {\n      layout = ['NetFront'];\n    }\n    // detect Windows Phone 7 desktop mode\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // detect Windows Phone 8+ desktop mode\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8+';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // detect IE 11 and above\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (!/\\bWPDesktop\\b/i.test(ua)) {\n        if (name) {\n          description.push('identifying as ' + name + (version ? ' ' + version : ''));\n        }\n        name = 'IE';\n      }\n      version = data[1];\n    }\n    // detect Microsoft Edge\n    else if ((name == 'Chrome' || name != 'IE') && (data = /\\bEdge\\/([\\d.]+)/.exec(ua))) {\n      name = 'Microsoft Edge';\n      version = data[1];\n      layout = ['Trident'];\n    }\n    // leverage environment features\n    if (useFeatures) {\n      // detect server-side environments\n      // Rhino has a global function while others have a global object\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {\n          os || (os = data[0].os || null);\n          try {\n            data[1] = context.require('ringo/engine').version;\n            version = data[1].join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if (data[0].global.system == context.system) {\n              name = 'Narwhal';\n            }\n          }\n        }\n        else if (typeof context.process == 'object' && (data = context.process)) {\n          name = 'Node.js';\n          arch = data.arch;\n          os = data.platform;\n          version = /[\\d.]+/.exec(data.version)[0];\n        }\n        else if (rhino) {\n          name = 'Rhino';\n        }\n      }\n      // detect Adobe AIR\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // detect PhantomJS\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // detect IE compatibility modes\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // we're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      os = os && format(os);\n    }\n    // detect prerelease phases\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // detect Firefox Mobile\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // obscure Maxthon's unreliable version\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // detect Silk desktop/accelerated modes\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // detect Xbox 360 and Xbox One\n    else if (/\\bXbox\\b/i.test(product)) {\n      os = null;\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // add mobile postfix\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // detect IE platform preview\n    else if (name == 'IE' && useFeatures && context.external === null) {\n      description.unshift('platform preview');\n    }\n    // detect BlackBerry OS version\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // detect Opera identifying/masking itself as another browser\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && (\n          product != 'Wii' && (\n            (useFeatures && opera) ||\n            (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n            (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n            (name == 'IE' && (\n              (os && !/^Win/.test(os) && version > 5.5) ||\n              /\\bWindows XP\\b/.test(os) && version > 8 ||\n              version == 8 && !/\\bTrident\\b/.test(ua)\n            ))\n          )\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n\n      // when \"indentifying\", the UA contains both Opera and the other browser's name\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // when \"masking\", the UA contains only the other browser's name\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // detect WebKit Nightly and approximate Chrome/Safari versions\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // correct build for numeric comparison\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // nightly builds are postfixed with a `+`\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // clear incorrect browser versions\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // use the full Chrome version when available\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // detect Blink layout engine\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && name != 'IE' && name != 'Microsoft Edge') {\n        layout = ['Blink'];\n      }\n      // detect JavaScriptCore\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // add the postfix of \".x\" or \"+\" for approximate versions\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // obscure version for some Safari 1-2 releases\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      }\n    }\n    // detect Opera desktop modes\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // detect Chrome desktop mode\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // strip incorrect OS versions\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // add layout engine\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {\n      // don't add layout details to description if they are falsey\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // combine contextual information\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // append manufacturer\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // append product\n    if (product) {\n      description.push((/^on /.test(description[description.length -1]) ? '' : 'on ') + product);\n    }\n    // parse OS into an object\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // add browser/OS architecture\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\n       * \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // export platform\n  // some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // define as an anonymous module so, through path mapping, it can be aliased\n    define(function() {\n      return parse();\n    });\n  }\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (freeExports && freeModule) {\n    // in Narwhal, Node.js, Rhino -require, or RingoJS\n    forOwn(parse(), function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  // in a browser or Rhino\n  else {\n    root.platform = parse();\n  }\n}.call(this));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/platform/platform.js\n// module id = 91\n// module chunks = 0"],"sourceRoot":""}