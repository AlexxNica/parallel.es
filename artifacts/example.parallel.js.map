{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///example.parallel.js","webpack:///./example/browser-example.ts","webpack:///./example/knights-tour.ts?b79d","webpack:///./example/mandelbrot.ts?2582","webpack:///./example/monte-carlo.ts?3984"],"names":["root","factory","exports","module","define","amd","this","webpackJsonpparallel_es","171","__webpack_require__","paintMonteCarloResult","results","monteCarloTable","rows","length","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default","next","done","result","value","row","insertRow","insertCell","innerText","project","startYear","toLocaleString","totalAmount","_arr","_loop","groupName","_i","group","groups","find","g","name","percentage","toFixed","err","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__","n","__WEBPACK_IMPORTED_MODULE_1__mandelbrot__","__WEBPACK_IMPORTED_MODULE_2__monte_carlo__","__WEBPACK_IMPORTED_MODULE_3__knights_tour__","mandelbrotCanvas","document","querySelector","mandelbrotContext","getContext","mandelbrotOptions","i","width","height","monteCarloOptions","investmentAmount","numRuns","numYears","performance","projects","seed","volatility","addEventListener","event","preventDefault","putImageData","createImageData","maxValuesPerTask","parseInt","console","time","subscribe","lines","index","blockSize","ImageData","then","timeEnd","reason","error","setTimeout","line","y","log","knightBoardResult","boardSize","solutions","x","25","createEnvironment","board","Array","fill","knightTours","startPath","environment","moves","numberOfFields","stack","map","pos","coordinate","fieldIndex","_stack","_fieldIndex","move","successor","accessible","push","pop","syncKnightTours","start","parallelKnightTours","options","successors","computeStartFields","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","directSuccessor","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","indirectSuccessor","total","startTime","now","__WEBPACK_IMPORTED_MODULE_1__src_browser_index__","from","inEnvironment","reduce","memo","count","subResults","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","tours","26","createMandelOptions","imageWidth","imageHeight","iterations","min","real","max","scalingFactor","computeMandelbrotLine","calculateZ","c","z","Math","pow","zI","Uint8ClampedArray","cI","_calculateZ","base","parallelMandelbrot","__WEBPACK_IMPORTED_MODULE_0__src_browser_index__","range","syncMandelbrot","callback","27","initializeOptions","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default","liquidity","createMonteCarloEnvironment","simulateOutcomes","cashFlows","toAbsoluteIndices","indices","currentPortfolioValue","previousYearIndex","relativeYear","currentYearIndex","cashFlowStartOfYear","round","year","run","randomPerformance","random","_year","projectsToCashFlows","projectsByThisYear","projectsByStartYear","cashFlow","calculateNoInterestReferenceLine","noInterestReferenceLine","investmentAmountLeft","projectsToSimulate","taskIndex","valuesPerWorker","slice","sort","a","b","arr","simulatedValues","calculateProject","groupForValue","to","createGroups","requiredAmount","noInterestReference","description","separator","calculateRequiredAmount","amount","projectsSameYear","otherProject","median","values","half","floor","NUMBER_OF_BUCKETS","simulatedValuesThisYear","valuesByGroup","bucketSize","buckets","bucket","Number","MIN_VALUE","MAX_VALUE","subBuckets","j","subBucket","nonEmptyGroups","filter","forEach","oneSixth","twoThird","syncMonteCarlo","parallelMonteCarlo","userOptions","__WEBPACK_IMPORTED_MODULE_2__src_browser_index__","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__"],"mappings":"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","file":"example.parallel.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parallel-es\"] = factory();\n\telse\n\t\troot[\"parallel-es\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"parallel-es\"] = factory();\n\telse\n\t\troot[\"parallel-es\"] = factory();\n})(this, function() {\nreturn webpackJsonpparallel_es([1],{\n\n/***/ 171:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mandelbrot__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__monte_carlo__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__knights_tour__ = __webpack_require__(25);\n\n\n\n\n/* tslint:disable:no-console */\nvar mandelbrotCanvas = document.querySelector(\"#mandelbrot-canvas\");\nvar mandelbrotContext = mandelbrotCanvas.getContext(\"2d\");\nvar mandelbrotOptions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mandelbrot__[\"a\" /* createMandelOptions */])(mandelbrotCanvas.width, mandelbrotCanvas.height, 10000);\nvar monteCarloOptions = {\n    investmentAmount: 620000,\n    numRuns: 10000,\n    numYears: 15,\n    performance: 0.0340000,\n    projects: [{\n        startYear: 0,\n        totalAmount: 10000\n    }, {\n        startYear: 1,\n        totalAmount: 10000\n    }, {\n        startYear: 2,\n        totalAmount: 10000\n    }, {\n        startYear: 5,\n        totalAmount: 50000\n    }, {\n        startYear: 15,\n        totalAmount: 800000\n    }],\n    seed: 10,\n    volatility: 0.0896000\n};\nvar monteCarloTable = document.querySelector(\"#montecarlo-table\");\ndocument.querySelector(\"#mandelbrot-run-async\").addEventListener(\"click\", function (event) {\n    event.preventDefault();\n    mandelbrotContext.putImageData(mandelbrotContext.createImageData(mandelbrotCanvas.width, mandelbrotCanvas.height), 0, 0);\n    var maxValuesPerTask = parseInt(document.querySelector(\"#mandelbrot-values-per-task\").value, 10);\n    console.time(\"mandelbrot-async\");\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mandelbrot__[\"b\" /* parallelMandelbrot */])(mandelbrotOptions, { maxValuesPerTask: maxValuesPerTask }).subscribe(function (lines, index, blockSize) {\n        for (var i = 0; i < lines.length; ++i) {\n            mandelbrotContext.putImageData(new ImageData(lines[i], mandelbrotCanvas.width, 1), 0, index * blockSize + i);\n        }\n    }).then(function () {\n        return console.timeEnd(\"mandelbrot-async\");\n    }, function (reason) {\n        return console.error(reason);\n    });\n});\ndocument.querySelector(\"#mandelbrot-run-sync\").addEventListener(\"click\", function () {\n    mandelbrotContext.putImageData(mandelbrotContext.createImageData(mandelbrotCanvas.width, mandelbrotCanvas.height), 0, 0);\n    setTimeout(function () {\n        console.time(\"mandelbrot-sync\");\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__mandelbrot__[\"c\" /* syncMandelbrot */])(mandelbrotOptions, function (line, y) {\n            mandelbrotContext.putImageData(new ImageData(line, mandelbrotCanvas.width, 1), 0, y);\n        });\n        console.timeEnd(\"mandelbrot-sync\");\n    }, 0);\n});\ndocument.querySelector(\"#montecarlo-run-sync\").addEventListener(\"click\", function () {\n    console.time(\"montecarlo-sync\");\n    var result = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__monte_carlo__[\"a\" /* syncMonteCarlo */])(monteCarloOptions);\n    console.timeEnd(\"montecarlo-sync\");\n    paintMonteCarloResult(result);\n    console.log(result);\n});\ndocument.querySelector(\"#montecarlo-run-parallel\").addEventListener(\"click\", function () {\n    console.time(\"montecarlo-parallel\");\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__monte_carlo__[\"b\" /* parallelMonteCarlo */])(monteCarloOptions).then(function (result) {\n        console.timeEnd(\"montecarlo-parallel\");\n        paintMonteCarloResult(result);\n        console.log(result);\n    });\n});\nfunction paintMonteCarloResult(results) {\n    while (monteCarloTable.rows.length > 1) {\n        monteCarloTable.deleteRow(1);\n    }\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(results), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var result = _step.value;\n\n            var row = monteCarloTable.insertRow();\n            row.insertCell().innerText = result.project.startYear.toLocaleString();\n            row.insertCell().innerText = result.project.totalAmount.toLocaleString();\n            var _arr = [\"green\", \"yellow\", \"gray\", \"red\"];\n\n            var _loop = function _loop() {\n                var groupName = _arr[_i];\n                var group = result.groups.find(function (g) {\n                    return g.name === groupName;\n                });\n                row.insertCell().innerText = group ? (group.percentage * 100).toFixed(2) : \"-\";\n            };\n\n            for (var _i = 0; _i < _arr.length; _i++) {\n                _loop();\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nvar knightBoardResult = document.querySelector(\"#knight-board-result\");\ndocument.querySelector(\"#knight-run-sync\").addEventListener(\"click\", function () {\n    var boardSize = parseInt(document.querySelector(\"#knight-board-size\").value, 10);\n    knightBoardResult.innerText = \"Calculating...\";\n    setTimeout(function () {\n        console.time(\"knight-run-sync\");\n        var solutions = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__knights_tour__[\"a\" /* syncKnightTours */])({ x: 0, y: 0 }, boardSize);\n        console.timeEnd(\"knight-run-sync\");\n        knightBoardResult.innerText = \"Found \" + solutions + \" solutions for \" + boardSize + \"x\" + boardSize + \" board\";\n    }, 0);\n});\ndocument.querySelector(\"#knight-run-parallel\").addEventListener(\"click\", function () {\n    var boardSize = parseInt(document.querySelector(\"#knight-board-size\").value, 10);\n    knightBoardResult.innerText = \"Calculating...\";\n    console.time(\"knight-run-parallel\");\n    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__knights_tour__[\"b\" /* parallelKnightTours */])({ x: 0, y: 0 }, boardSize).then(function (solutions) {\n        console.timeEnd(\"knight-run-parallel\");\n        knightBoardResult.innerText = \"Found \" + solutions + \" solutions for \" + boardSize + \"x\" + boardSize + \" board\";\n    }, function (reason) {\n        return console.log(reason);\n    });\n});\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_browser_index__ = __webpack_require__(6);\n/* unused harmony export knightTours */\n/* harmony export (immutable) */ exports[\"a\"] = syncKnightTours;\n/* harmony export (immutable) */ exports[\"b\"] = parallelKnightTours;\n\n\nfunction createEnvironment(boardSize) {\n    var board = new Array(boardSize * boardSize);\n    board.fill(0);\n    return {\n        board: board,\n        boardSize: boardSize\n    };\n}\nfunction knightTours(startPath, environment) {\n    var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n    var boardSize = environment.boardSize;\n    var board = environment.board;\n    var numberOfFields = boardSize * boardSize;\n    var results = 0;\n    var stack = startPath.map(function (pos, index) {\n        return { coordinate: pos, n: index + 1 };\n    });\n    for (var index = 0; index < startPath.length - 1; ++index) {\n        var fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n    while (stack.length > 0) {\n        var _stack = stack[stack.length - 1];\n        var coordinate = _stack.coordinate;\n        var n = _stack.n;\n\n        var _fieldIndex = coordinate.x * boardSize + coordinate.y;\n        if (board[_fieldIndex] !== 0) {\n            // back tracking\n            board[_fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n        board[_fieldIndex] = n;\n        for (var i = 0; i < moves.length; ++i) {\n            var move = moves[i];\n            var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n    return results;\n}\nfunction syncKnightTours(start, boardSize) {\n    var environment = createEnvironment(boardSize);\n    return knightTours([start], environment);\n}\nfunction parallelKnightTours(start, boardSize, options) {\n    function successors(coordinate) {\n        var moves = [{ x: -2, y: -1 }, { x: -2, y: 1 }, { x: -1, y: -2 }, { x: -1, y: 2 }, { x: 1, y: -2 }, { x: 1, y: 2 }, { x: 2, y: -1 }, { x: 2, y: 1 }];\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(moves), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var move = _step.value;\n\n                var successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n                var accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize && (successor.x !== start.x || successor.y !== start.y) && successor.x !== coordinate.x && successor.y !== coordinate.y;\n                if (accessible) {\n                    result.push(successor);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        return result;\n    }\n    function computeStartFields() {\n        var result = [];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(successors(start)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var directSuccessor = _step2.value;\n                var _iteratorNormalCompletion3 = true;\n                var _didIteratorError3 = false;\n                var _iteratorError3 = undefined;\n\n                try {\n                    for (var _iterator3 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(successors(directSuccessor)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var indirectSuccessor = _step3.value;\n\n                        result.push([start, directSuccessor, indirectSuccessor]);\n                    }\n                } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                } finally {\n                    try {\n                        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                            _iterator3.return();\n                        }\n                    } finally {\n                        if (_didIteratorError3) {\n                            throw _iteratorError3;\n                        }\n                    }\n                }\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        return result;\n    }\n    var total = 0;\n    var startTime = performance.now();\n    return __WEBPACK_IMPORTED_MODULE_1__src_browser_index__[\"default\"].from(computeStartFields(), options).inEnvironment(createEnvironment, boardSize).map(knightTours).reduce(0, function (memo, count) {\n        return memo + count;\n    }).subscribe(function (subResults) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n            for (var _iterator4 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(subResults), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var tours = _step4.value;\n\n                total += tours;\n            }\n            /* tslint:disable:no-console */\n        } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                }\n            } finally {\n                if (_didIteratorError4) {\n                    throw _iteratorError4;\n                }\n            }\n        }\n\n        console.log(total / (performance.now() - startTime) * 1000 + \" results per second\");\n    });\n}\n\n/***/ },\n\n/***/ 26:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_browser_index__ = __webpack_require__(6);\n/* harmony export (immutable) */ exports[\"a\"] = createMandelOptions;\n/* unused harmony export computeMandelbrotLine */\n/* harmony export (immutable) */ exports[\"b\"] = parallelMandelbrot;\n/* harmony export (immutable) */ exports[\"c\"] = syncMandelbrot;\n\nfunction createMandelOptions(imageWidth, imageHeight, iterations) {\n    // X axis shows real numbers, y axis imaginary\n    var min = { i: -1.2, real: -2.0 };\n    var max = { i: 0, real: 1.0 };\n    max.i = min.i + (max.real - min.real) * imageHeight / imageWidth;\n    var scalingFactor = {\n        i: (max.i - min.i) / (imageHeight - 1),\n        real: (max.real - min.real) / (imageWidth - 1)\n    };\n    return {\n        imageHeight: imageHeight,\n        imageWidth: imageWidth,\n        iterations: iterations,\n        max: max,\n        min: min,\n        scalingFactor: scalingFactor\n    };\n}\nfunction computeMandelbrotLine(y, options) {\n    function calculateZ(c) {\n        var z = { i: c.i, real: c.real };\n        var n = 0;\n        for (; n < options.iterations; ++n) {\n            if (Math.pow(z.real, 2) + Math.pow(z.i, 2) > 4) {\n                break;\n            }\n            // z ** 2 + c\n            var zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = Math.pow(z.real, 2) - Math.pow(zI, 2) + c.real;\n        }\n        return { z: z, n: n };\n    }\n    var line = new Uint8ClampedArray(options.imageWidth * 4);\n    var cI = options.max.i - y * options.scalingFactor.i;\n    for (var x = 0; x < options.imageWidth; ++x) {\n        var c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        var _calculateZ = calculateZ(c);\n\n        var n = _calculateZ.n;\n\n        var base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\nfunction parallelMandelbrot(mandelbrotOptions, options) {\n    return __WEBPACK_IMPORTED_MODULE_0__src_browser_index__[\"default\"].range(0, mandelbrotOptions.imageHeight, 1, options).inEnvironment(mandelbrotOptions).map(computeMandelbrotLine);\n}\nfunction syncMandelbrot(mandelbrotOptions, callback) {\n    for (var y = 0; y < mandelbrotOptions.imageHeight; ++y) {\n        var line = computeMandelbrotLine(y, mandelbrotOptions);\n        callback(line, y);\n    }\n}\n\n/***/ },\n\n/***/ 27:\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_browser_index__ = __webpack_require__(6);\n/* harmony export (immutable) */ exports[\"a\"] = syncMonteCarlo;\n/* harmony export (immutable) */ exports[\"b\"] = parallelMonteCarlo;\n\n\n\nfunction initializeOptions(options) {\n    return __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_assign___default()({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\nfunction createMonteCarloEnvironment(options) {\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows, numYears) {\n        function toAbsoluteIndices(indices) {\n            var currentPortfolioValue = options.investmentAmount;\n            var previousYearIndex = 100;\n            for (var relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                var currentYearIndex = indices[relativeYear];\n                var cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n                // scale current value with performance gain according to index\n                var performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n                indices[relativeYear] = Math.round(currentPortfolioValue);\n                previousYearIndex = currentYearIndex;\n            }\n            return indices;\n        }\n        var result = new Array(options.numYears);\n        for (var year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n        for (var run = 0; run < options.numRuns; run++) {\n            var indices = [100];\n            for (var i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                var randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n            for (var _year = 0; _year < indices.length; ++_year) {\n                result[_year][run] = indices[_year];\n            }\n        }\n        return result;\n    }\n    function projectsToCashFlows() {\n        var cashFlows = [];\n        for (var year = 0; year < options.numYears; ++year) {\n            var projectsByThisYear = projectsByStartYear[year] || [];\n            var cashFlow = -projectsByThisYear.reduce(function (memo, project) {\n                return memo + project.totalAmount;\n            }, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n    function calculateNoInterestReferenceLine(cashFlows) {\n        var noInterestReferenceLine = [];\n        var investmentAmountLeft = options.investmentAmount;\n        for (var year = 0; year < options.numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n    var projectsToSimulate = options.projects;\n    if (options.taskIndex && options.valuesPerWorker) {\n        projectsToSimulate = options.projects.slice(options.taskIndex * options.valuesPerWorker, (options.taskIndex + 1) * options.valuesPerWorker);\n    }\n    var projects = options.projects.sort(function (a, b) {\n        return a.startYear - b.startYear;\n    });\n    // Group projects by startYear, use lodash groupBy instead\n    var projectsByStartYear = {};\n    for (var i = 0; i < projects.length; ++i) {\n        var project = projects[i];\n        var arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n    var cashFlows = projectsToCashFlows();\n    var noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows);\n    var numYears = projectsToSimulate.reduce(function (memo, project) {\n        return Math.max(memo, project.startYear);\n    }, 0);\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine: noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears: numYears,\n        projectsByStartYear: projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\nfunction calculateProject(project, environment) {\n    var NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value, groups) {\n        return groups.find(function (group) {\n            return (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value);\n        });\n    }\n    function createGroups(requiredAmount, noInterestReference) {\n        return [{ description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true }, { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount }, { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity }, { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }];\n    }\n    function calculateRequiredAmount() {\n        var amount = project.totalAmount;\n        var projectsSameYear = environment.projectsByStartYear[project.startYear];\n        for (var i = 0; i < projectsSameYear.length; ++i) {\n            var otherProject = projectsSameYear[i];\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n    function median(values) {\n        var half = Math.floor(values.length / 2);\n        if (values.length % 2) {\n            return values[half];\n        }\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n    var requiredAmount = calculateRequiredAmount();\n    var simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort(function (a, b) {\n        return a - b;\n    });\n    var groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    var valuesByGroup = {};\n    var bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    var buckets = [];\n    for (var i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        var bucket = {\n            max: Number.MIN_VALUE,\n            min: Number.MAX_VALUE,\n            subBuckets: {}\n        };\n        for (var j = i; j < i + bucketSize; ++j) {\n            var value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n            var group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            var subBucket = bucket.subBuckets[group.name] = bucket.subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n        buckets.push(bucket);\n    }\n    var nonEmptyGroups = groups.filter(function (group) {\n        return !!valuesByGroup[group.name];\n    });\n    nonEmptyGroups.forEach(function (group) {\n        return group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length;\n    });\n    var oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets: buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project: project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\nfunction syncMonteCarlo(options) {\n    var environment = createMonteCarloEnvironment(initializeOptions(options));\n    var projects = [];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_get_iterator___default()(options.projects), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var project = _step.value;\n\n            projects.push(calculateProject(project, environment));\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return projects;\n}\nfunction parallelMonteCarlo(userOptions) {\n    var options = initializeOptions(userOptions);\n    return __WEBPACK_IMPORTED_MODULE_2__src_browser_index__[\"default\"].from(options.projects).inEnvironment(createMonteCarloEnvironment, options).map(calculateProject);\n}\n\n/***/ }\n\n},[171])\n});\n;\n\n\n// WEBPACK FOOTER //\n// example.parallel.js","import {parallelMandelbrot, syncMandelbrot, createMandelOptions} from \"./mandelbrot\";\nimport {syncMonteCarlo, parallelMonteCarlo, IProjectResult} from \"./monte-carlo\";\nimport {syncKnightTours, parallelKnightTours} from \"./knights-tour\";\n\n/* tslint:disable:no-console */\nconst mandelbrotCanvas = document.querySelector(\"#mandelbrot-canvas\") as HTMLCanvasElement;\nconst mandelbrotContext = mandelbrotCanvas.getContext(\"2d\");\nconst mandelbrotOptions = createMandelOptions(mandelbrotCanvas.width, mandelbrotCanvas.height, 10000);\n\nconst monteCarloOptions = {\n    investmentAmount: 620000,\n    numRuns: 10000,\n    numYears: 15,\n    performance: 0.0340000,\n    projects: [\n        {\n            startYear: 0,\n            totalAmount: 10000\n        }, {\n            startYear: 1,\n            totalAmount: 10000\n        }, {\n            startYear: 2,\n            totalAmount: 10000\n        }, {\n            startYear: 5,\n            totalAmount: 50000\n        }, {\n            startYear: 15,\n            totalAmount: 800000\n        }\n    ],\n    seed: 10,\n    volatility: 0.0896000\n};\nconst monteCarloTable = document.querySelector(\"#montecarlo-table\") as HTMLTableElement;\n\ndocument.querySelector(\"#mandelbrot-run-async\").addEventListener(\"click\", function (event) {\n    event.preventDefault();\n\n    mandelbrotContext!.putImageData(mandelbrotContext!.createImageData(mandelbrotCanvas.width, mandelbrotCanvas.height), 0, 0);\n    const maxValuesPerTask = parseInt((document.querySelector(\"#mandelbrot-values-per-task\") as HTMLInputElement).value, 10);\n\n    console.time(\"mandelbrot-async\");\n    parallelMandelbrot(mandelbrotOptions, { maxValuesPerTask })\n        .subscribe((lines, index, blockSize) => {\n            for (let i = 0; i < lines.length; ++i) {\n                mandelbrotContext!.putImageData(new ImageData(lines[i], mandelbrotCanvas.width, 1), 0, index * blockSize + i);\n            }\n        })\n        .then(() => console.timeEnd(\"mandelbrot-async\"), reason => console.error(reason));\n});\n\ndocument.querySelector(\"#mandelbrot-run-sync\").addEventListener(\"click\", function () {\n    mandelbrotContext!.putImageData(mandelbrotContext!.createImageData(mandelbrotCanvas.width, mandelbrotCanvas.height), 0, 0);\n\n    setTimeout(() => {\n        console.time(\"mandelbrot-sync\");\n        syncMandelbrot(mandelbrotOptions, function (line, y) {\n            mandelbrotContext!.putImageData(new ImageData(line, mandelbrotCanvas.width, 1), 0, y);\n        });\n        console.timeEnd(\"mandelbrot-sync\");\n    }, 0);\n\n});\n\ndocument.querySelector(\"#montecarlo-run-sync\").addEventListener(\"click\", function () {\n    console.time(\"montecarlo-sync\");\n    const result = syncMonteCarlo(monteCarloOptions);\n    console.timeEnd(\"montecarlo-sync\");\n    paintMonteCarloResult(result);\n    console.log(result);\n});\n\ndocument.querySelector(\"#montecarlo-run-parallel\").addEventListener(\"click\", function () {\n    console.time(\"montecarlo-parallel\");\n    parallelMonteCarlo(monteCarloOptions).then((result) => {\n        console.timeEnd(\"montecarlo-parallel\");\n        paintMonteCarloResult(result);\n        console.log(result);\n    });\n});\n\nfunction paintMonteCarloResult(results: IProjectResult[]) {\n    while (monteCarloTable.rows.length > 1) {\n        monteCarloTable.deleteRow(1);\n    }\n\n    for (const result of results) {\n        const row = monteCarloTable.insertRow();\n        row.insertCell().innerText = result.project.startYear.toLocaleString();\n        row.insertCell().innerText = result.project.totalAmount.toLocaleString();\n\n        for (const groupName of [\"green\", \"yellow\", \"gray\", \"red\"]) {\n            const group = result.groups.find(g => g.name === groupName);\n            row.insertCell().innerText = group ? (group.percentage * 100).toFixed(2) : \"-\";\n        }\n    }\n}\n\nconst knightBoardResult = document.querySelector(\"#knight-board-result\") as HTMLParagraphElement;\n\ndocument.querySelector(\"#knight-run-sync\").addEventListener(\"click\", function () {\n    const boardSize = parseInt((document.querySelector(\"#knight-board-size\")  as HTMLInputElement).value, 10);\n    knightBoardResult.innerText = \"Calculating...\";\n\n    setTimeout(() => {\n        console.time(\"knight-run-sync\");\n        const solutions = syncKnightTours({ x: 0, y: 0}, boardSize);\n        console.timeEnd(\"knight-run-sync\");\n\n        knightBoardResult.innerText = `Found ${solutions} solutions for ${boardSize}x${boardSize} board`;\n    }, 0);\n});\n\ndocument.querySelector(\"#knight-run-parallel\").addEventListener(\"click\", function () {\n    const boardSize = parseInt((document.querySelector(\"#knight-board-size\")  as HTMLInputElement).value, 10);\n    knightBoardResult.innerText = \"Calculating...\";\n\n    console.time(\"knight-run-parallel\");\n    parallelKnightTours({ x: 0, y: 0}, boardSize)\n        .then(solutions => {\n            console.timeEnd(\"knight-run-parallel\");\n            knightBoardResult.innerText = `Found ${solutions} solutions for ${boardSize}x${boardSize} board`;\n        }, (reason) => console.log(reason));\n});\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/browser-example.ts","import parallel from \"../src/browser/index\";\nimport {IParallelOptions} from \"../src/common/parallel/parallel-options\";\n\nexport interface ICoordinate {\n    readonly x: number;\n    readonly y: number;\n}\n\nexport interface IKnightTourEnvironment {\n    boardSize: number;\n    board: number[];\n}\n\nfunction createEnvironment(boardSize: number): IKnightTourEnvironment {\n    const board: number[] = new Array(boardSize * boardSize);\n    board.fill(0);\n    return {\n        board,\n        boardSize\n    };\n}\n\nexport function knightTours(startPath: ICoordinate[], environment: IKnightTourEnvironment): number {\n    const moves = [\n        { x: -2, y: -1 }, { x: -2, y: 1}, { x: -1, y: -2 }, { x: -1, y: 2 },\n        { x: 1, y: -2 }, { x: 1, y: 2}, { x: 2, y: -1 }, { x: 2, y: 1 }\n    ];\n    const boardSize = environment.boardSize;\n    const board = environment.board;\n    const numberOfFields = boardSize * boardSize;\n    let results: number = 0;\n    const stack: { coordinate: ICoordinate, n: number }[] = startPath.map((pos, index) => ({ coordinate: pos, n: index + 1 }));\n\n    for (let index = 0; index < startPath.length - 1; ++index) {\n        const fieldIndex = startPath[index].x * boardSize + startPath[index].y;\n        board[fieldIndex] = index + 1;\n    }\n\n    while (stack.length > 0) {\n        const { coordinate, n } = stack[stack.length - 1];\n        const fieldIndex = coordinate.x * boardSize + coordinate.y;\n\n        if (board[fieldIndex] !== 0) {\n            // back tracking\n            board[fieldIndex] = 0;\n            stack.pop(); // remove current value\n            continue;\n        }\n\n        // entry\n        if (n === numberOfFields) {\n            ++results;\n            stack.pop();\n            continue;\n        }\n\n        board[fieldIndex] = n!;\n\n        for (let i = 0; i < moves.length; ++i) {\n            const move = moves[i];\n            const successor = { x: coordinate.x + move.x, y: coordinate.y + move.y };\n            // not outside of board and not yet accessed\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize &&  successor.y < boardSize && board[successor.x * boardSize + successor.y] === 0;\n\n            if (accessible) {\n                stack.push({ coordinate: successor, n: n + 1 });\n            }\n        }\n    }\n\n    return results;\n}\n\nexport function syncKnightTours(start: ICoordinate, boardSize: number): number {\n    const environment = createEnvironment(boardSize);\n    return knightTours([start], environment);\n}\n\nexport function parallelKnightTours(start: ICoordinate, boardSize: number, options?: IParallelOptions): PromiseLike<number> {\n\n    function successors(coordinate: ICoordinate) {\n        const moves = [\n            {x: -2, y: -1}, {x: -2, y: 1}, {x: -1, y: -2}, {x: -1, y: 2},\n            {x: 1, y: -2}, {x: 1, y: 2}, {x: 2, y: -1}, {x: 2, y: 1}\n        ];\n        const result: ICoordinate[] = [];\n\n        for (const move of moves) {\n            const successor = {x: coordinate.x + move.x, y: coordinate.y + move.y};\n            const accessible = successor.x >= 0 && successor.y >= 0 && successor.x < boardSize && successor.y < boardSize &&\n                (successor.x !== start.x || successor.y !== start.y) && (successor.x !== coordinate.x && successor.y !== coordinate.y);\n            if (accessible) {\n                result.push(successor);\n            }\n        }\n\n        return result;\n    }\n\n    function computeStartFields() {\n        const result: ICoordinate[][] = [];\n        for (const directSuccessor of successors(start)) {\n            for (const indirectSuccessor of successors(directSuccessor)) {\n                result.push([start, directSuccessor, indirectSuccessor]);\n            }\n        }\n        return result;\n    }\n\n    let total = 0;\n    let startTime = performance.now();\n    return parallel\n        .from(computeStartFields(), options)\n        .inEnvironment(createEnvironment, boardSize)\n        .map(knightTours)\n        .reduce(0, (memo, count) => memo + count)\n        .subscribe(subResults => {\n            for (const tours of subResults) {\n                total += tours;\n            }\n            /* tslint:disable:no-console */\n            console.log(`${total / (performance.now() - startTime) * 1000} results per second`);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/knights-tour.ts","import parallel from \"../src/browser/index\";\nimport {IParallelOptions} from \"../src/common/parallel/parallel-options\";\n\ninterface IComplexNumber {\n    i: number;\n    real: number;\n}\n\nexport interface IMandelbrotOptions {\n    imageHeight: number;\n    imageWidth: number;\n    iterations: number;\n    max: IComplexNumber;\n    min: IComplexNumber;\n    scalingFactor: IComplexNumber;\n}\n\nexport function createMandelOptions(imageWidth: number, imageHeight: number, iterations: number): IMandelbrotOptions {\n    // X axis shows real numbers, y axis imaginary\n    const min = { i: -1.2, real: -2.0 };\n    const max = { i: 0, real: 1.0 };\n    max.i = min.i + (max.real - min.real) * imageHeight / imageWidth;\n\n    const scalingFactor = {\n        i: (max.i - min.i) / (imageHeight - 1),\n        real: (max.real - min.real) / (imageWidth - 1)\n    };\n\n    return {\n        imageHeight,\n        imageWidth,\n        iterations,\n        max,\n        min,\n        scalingFactor\n    };\n}\n\nexport function computeMandelbrotLine(y: number, options: IMandelbrotOptions): Uint8ClampedArray {\n    function calculateZ(c: IComplexNumber): { z: IComplexNumber, n: number } {\n        const z = { i: c.i, real: c.real };\n        let n = 0;\n\n        for (; n < options.iterations; ++n) {\n            if (z.real ** 2 + z.i ** 2 > 4) {\n                break;\n            }\n\n            // z ** 2 + c\n            const zI = z.i;\n            z.i = 2 * z.real * z.i + c.i;\n            z.real = z.real ** 2 - zI ** 2 + c.real;\n        }\n\n        return { z, n };\n    }\n\n    const line = new Uint8ClampedArray(options.imageWidth * 4);\n    const cI = options.max.i - y * options.scalingFactor.i;\n\n    for (let x = 0; x < options.imageWidth; ++x) {\n        const c = {\n            i: cI,\n            real: options.min.real + x * options.scalingFactor.real\n        };\n\n        const { n } = calculateZ(c);\n        const base = x * 4;\n        /* tslint:disable:no-bitwise */\n        line[base] = n & 0xFF;\n        line[base + 1] = n & 0xFF00;\n        line[base + 2] = n & 0xFF0000;\n        line[base + 3] = 255;\n    }\n    return line;\n}\n\nexport function parallelMandelbrot(mandelbrotOptions: IMandelbrotOptions, options?: IParallelOptions) {\n    return parallel\n        .range(0, mandelbrotOptions.imageHeight, 1, options)\n        .inEnvironment(mandelbrotOptions)\n        .map(computeMandelbrotLine);\n}\n\nexport function syncMandelbrot(mandelbrotOptions: IMandelbrotOptions, callback: (line: Uint8ClampedArray, y: number) => void) {\n    for (let y = 0; y < mandelbrotOptions.imageHeight; ++y) {\n        const line = computeMandelbrotLine(y, mandelbrotOptions);\n        callback(line, y);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/mandelbrot.ts","import parallel from \"../src/browser/index\";\nimport {Dictionary} from \"lodash\";\n\n/* tslint:disable:no-var-requires */\n// declare function require(name: string): any;\n// const Random = require(\"simjs-random\");\n// const random = new Random(10);\n\nexport interface IProject {\n    startYear: number;\n    totalAmount: number;\n}\n\ninterface IBucket {\n    min: number;\n    max: number;\n\n    subBuckets: { [groupName: string]: { group: string; min: number, max: number } };\n}\n\ninterface IGroup {\n    /**\n     * The unique name of this group\n     */\n    name: string;\n\n    /**\n     * The description of the group\n     */\n    description: string;\n\n    /**\n     * Should a separator line been drawn for this group?\n     */\n    separator: boolean;\n\n    /**\n     * Whats the percentage of values in this group to the total number of simulated values\n     */\n    percentage: number;\n\n    /**\n     * Whats the minimum value that is still part of this group\n     */\n    from?: number;\n    /**\n     * Whats the maximum value (exclusive) that defines the upper end of this group\n     */\n    to?: number;\n}\n\nexport interface IProjectResult {\n    /**\n     * The minimal simulated value for this project\n     */\n    min: number;\n    /**\n     * The maximal simulated value\n     */\n    max: number;\n\n    /** The median of the values found for this project\n     */\n    median: number;\n\n    /**\n     * Defines where the 2/3 of the simulated values start / end.\n     */\n    twoThird: {\n        min: number;\n        max: number;\n    };\n\n    buckets: IBucket[];\n\n    groups: IGroup[];\n\n    /**\n     * The project\n     */\n    project: IProject;\n}\n\ninterface IMonteCarloEnvironment {\n    investmentAmount: number;\n    liquidity: number;\n    noInterestReferenceLine: number[];\n    numRuns: number;\n    numYears: number;\n    projectsByStartYear: Dictionary<IProject[]>;\n    simulatedValues: number[][];\n}\n\nexport interface IMonteCarloSimulationOptions {\n    numYears?: number;\n    numRuns?: number;\n    projects?: IProject[];\n    investmentAmount?: number;\n    performance?: number;\n    seed?: number;\n    volatility: number;\n    liquidity?: number;\n}\n\ninterface IInitializedMonteCarloSimulationOptions {\n    numYears: number;\n    numRuns: number;\n    projects: IProject[];\n    investmentAmount: number;\n    performance: number;\n    seed?: number;\n    taskIndex?: number;\n    valuesPerWorker?: number;\n    liquidity: number;\n    volatility: number;\n}\n\nfunction initializeOptions(options?: IMonteCarloSimulationOptions): IInitializedMonteCarloSimulationOptions {\n    return Object.assign({}, {\n        investmentAmount: 1000000,\n        liquidity: 10000,\n        numRuns: 10000,\n        numYears: 10,\n        performance: 0,\n        projects: [],\n        seed: undefined,\n        volatility: 0.01\n    }, options);\n}\n\nfunction createMonteCarloEnvironment(options: IInitializedMonteCarloSimulationOptions): IMonteCarloEnvironment {\n    /**\n     * Performs the monte carlo simulation for all years and num runs.\n     * @param cashFlows the cash flows\n     * @returns {number[][]} the simulated outcomes grouped by year\n     */\n    function simulateOutcomes(cashFlows: number[], numYears: number): number[][]  {\n        function toAbsoluteIndices(indices: number[]) {\n            let currentPortfolioValue = options.investmentAmount;\n            let previousYearIndex = 100;\n\n            for (let relativeYear = 0; relativeYear < indices.length; ++relativeYear) {\n                const currentYearIndex = indices[relativeYear];\n                const cashFlowStartOfYear = relativeYear === 0 ? 0 : cashFlows[relativeYear - 1];\n\n                // scale current value with performance gain according to index\n                const performance = currentYearIndex / previousYearIndex;\n                currentPortfolioValue = (currentPortfolioValue + cashFlowStartOfYear) * performance;\n\n                indices[relativeYear] = Math.round(currentPortfolioValue);\n                previousYearIndex = currentYearIndex;\n            }\n\n            return indices;\n        }\n\n        const result: number[][] = new Array(options.numYears);\n        for (let year = 0; year <= numYears; ++year) {\n            result[year] = new Array(options.numRuns);\n        }\n\n        for (let run = 0; run < options.numRuns; run++) {\n            const indices = [100];\n\n            for (let i = 1; i <= numYears; i++) {\n                // const randomPerformance = 1 + random.normal(options.performance, options.volatility);\n                const randomPerformance = 1 + Math.random();\n                indices.push(indices[i - 1] * randomPerformance);\n            }\n\n            // convert the relative values from above to absolute values.\n            toAbsoluteIndices(indices);\n\n            for (let year = 0; year < indices.length; ++year) {\n                result[year][run] = indices[year];\n            }\n        }\n\n        return result;\n    }\n\n    function projectsToCashFlows() {\n        const cashFlows: number[] = [];\n        for (let year = 0; year < options.numYears; ++year) {\n            const projectsByThisYear = projectsByStartYear[year] || [];\n            const cashFlow = -projectsByThisYear.reduce((memo, project) => memo + project.totalAmount, 0);\n            cashFlows.push(cashFlow);\n        }\n        return cashFlows;\n    }\n\n    function calculateNoInterestReferenceLine(cashFlows: number[]) {\n        const noInterestReferenceLine: number[] = [];\n\n        let investmentAmountLeft = options.investmentAmount;\n        for (let year = 0; year < options.numYears; ++year) {\n            investmentAmountLeft = investmentAmountLeft + cashFlows[year];\n            noInterestReferenceLine.push(investmentAmountLeft);\n        }\n        return noInterestReferenceLine;\n    }\n\n    let projectsToSimulate: IProject[] = options.projects;\n\n    if (options.taskIndex && options.valuesPerWorker) {\n        projectsToSimulate = options.projects.slice(options.taskIndex * options.valuesPerWorker, (options.taskIndex + 1) * options.valuesPerWorker);\n    }\n\n    const projects = options.projects.sort((a, b) => a.startYear - b.startYear);\n\n    // Group projects by startYear, use lodash groupBy instead\n    const projectsByStartYear: Dictionary<IProject[]> = {};\n    for (let i = 0; i < projects.length; ++i) {\n        const project = projects[i];\n        const arr = projectsByStartYear[project.startYear] = projectsByStartYear[project.startYear] || [];\n        arr.push(project);\n    }\n\n    const cashFlows = projectsToCashFlows();\n    const noInterestReferenceLine = calculateNoInterestReferenceLine(cashFlows);\n\n    const numYears = projectsToSimulate.reduce((memo, project) => Math.max(memo, project.startYear), 0);\n\n    return {\n        investmentAmount: options.investmentAmount,\n        liquidity: options.liquidity,\n        noInterestReferenceLine,\n        numRuns: options.numRuns,\n        numYears,\n        projectsByStartYear,\n        simulatedValues: simulateOutcomes(cashFlows, numYears)\n    };\n}\n\nfunction calculateProject(project: IProject, environment: IMonteCarloEnvironment): IProjectResult {\n    const NUMBER_OF_BUCKETS = 10;\n    function groupForValue(value: number, groups: IGroup[]): IGroup {\n        return groups.find(group => (typeof group.from === \"undefined\" || group.from <= value) && (typeof group.to === \"undefined\" || group.to > value))!;\n    }\n\n    function createGroups(requiredAmount: number, noInterestReference: number): IGroup[] {\n        return [\n            { description: \"Ziel erreichbar\", from: requiredAmount, name: \"green\", percentage: 0, separator: true},\n            { description: \"mit Zusatzliquidität erreichbar\", from: requiredAmount - environment.liquidity, name: \"yellow\", percentage: 0, separator: true, to: requiredAmount },\n            { description: \"nicht erreichbar\", from: noInterestReference, name: \"gray\", percentage: 0, separator: false, to: requiredAmount - environment.liquidity },\n            { description: \"nicht erreichbar, mit Verlust\", name: \"red\", percentage: 0, separator: false, to: noInterestReference }\n        ];\n    }\n\n    function calculateRequiredAmount() {\n        let amount = project.totalAmount;\n        const projectsSameYear = environment.projectsByStartYear[project.startYear];\n\n        for (let i = 0; i < projectsSameYear.length; ++i) {\n            const otherProject = projectsSameYear[i];\n            if (otherProject === project) {\n                break;\n            }\n            amount += otherProject.totalAmount;\n        }\n        return amount;\n    }\n\n    function median(values: number[]) {\n        const half = Math.floor(values.length / 2);\n\n        if (values.length % 2) {\n            return values[half];\n        }\n\n        return (values[half - 1] + values[half]) / 2.0;\n    }\n\n    const requiredAmount = calculateRequiredAmount();\n    const simulatedValuesThisYear = environment.simulatedValues[project.startYear];\n    simulatedValuesThisYear.sort((a, b) => a - b);\n\n    const groups = createGroups(requiredAmount, environment.noInterestReferenceLine[project.startYear]);\n    const valuesByGroup: { [groupName: string]: number } = {};\n    const bucketSize = Math.round(simulatedValuesThisYear.length / NUMBER_OF_BUCKETS);\n    const buckets: IBucket[] = [];\n\n    for (let i = 0; i < simulatedValuesThisYear.length; i += bucketSize) {\n        const bucket: IBucket = {\n            max: Number.MIN_VALUE,\n            min: Number.MAX_VALUE,\n            subBuckets: {}\n        };\n\n        for (let j = i; j < i + bucketSize; ++j) {\n            const value = simulatedValuesThisYear[j];\n            bucket.min = Math.min(bucket.min, value);\n            bucket.max = Math.max(bucket.max, value);\n\n            const group = groupForValue(simulatedValuesThisYear[j], groups);\n            valuesByGroup[group.name] = (valuesByGroup[group.name] || 0) + 1;\n            const subBucket = bucket.subBuckets[group.name] = bucket.subBuckets[group.name] || { group: group.name, max: Number.MIN_VALUE, min: Number.MAX_VALUE };\n            subBucket.min = Math.min(subBucket.min, value);\n            subBucket.max = Math.max(subBucket.max, value);\n        }\n\n        buckets.push(bucket);\n    }\n\n    const nonEmptyGroups = groups.filter(group => !!valuesByGroup[group.name]);\n    nonEmptyGroups.forEach(group => group.percentage = valuesByGroup[group.name] / simulatedValuesThisYear.length);\n\n    const oneSixth = Math.round(simulatedValuesThisYear.length / 6);\n    return {\n        buckets,\n        groups: nonEmptyGroups,\n        max: simulatedValuesThisYear[simulatedValuesThisYear.length - 1],\n        median: median(simulatedValuesThisYear),\n        min: simulatedValuesThisYear[0],\n        project,\n        twoThird: {\n            max: simulatedValuesThisYear[simulatedValuesThisYear.length - oneSixth],\n            min: simulatedValuesThisYear[oneSixth]\n        }\n    };\n}\n\nexport function syncMonteCarlo(options?: IMonteCarloSimulationOptions) {\n    const environment = createMonteCarloEnvironment(initializeOptions(options));\n\n    let projects: IProjectResult[] = [];\n    for (const project of options!.projects!) {\n        projects.push(calculateProject(project, environment));\n    }\n\n    return projects;\n}\n\nexport function parallelMonteCarlo(userOptions?: IMonteCarloSimulationOptions) {\n    const options = initializeOptions(userOptions);\n    return parallel\n        .from(options.projects)\n        .inEnvironment(createMonteCarloEnvironment, options)\n        .map(calculateProject);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./example/monte-carlo.ts"],"sourceRoot":""}